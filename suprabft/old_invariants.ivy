
    #invariant forall Hd:height_t. forall Qd:cert_t. forall Ha:height_t. forall Qa:cert_t. (is_good(id) & Hd <= chain_size & Ha <= chain_size_2cc & height_t.succ(Ha,Hd) & commit_candidates(Qd,Hd) & commit_candidates(Qa,Ha)) -> Qd.block.parent = block_t.hash(Qa.block)

    # # these invariants support blockchain_parent invariant
    # invariant forall H1:height_t. forall H2:height_t. (height_t.succ(H1, H2) & H2 < chain_size) -> ( H2 < chain_size_2cc | H2 = chain_size_2cc | (chain_size_2cc <= H1 & H2 < chain_size))

    # invariant forall H1:height_t. forall H2:height_t. (height_t.succ(H1, H2) & H2 < chain_size_2cc & H2 < chain_size & is_good(id)) -> blockchain_temp(H2).parent = block_t.hash(blockchain_temp(H1))

    # invariant forall H1:height_t. forall H2:height_t. (height_t.succ(H1, H2) & H2 < chain_size & is_good(id) & H2 = chain_size_2cc) -> forall Q2:cert_t. (forest_store_temp(Q2,H2) -> forest_root_temp(Q2,H2))

    # invariant forall Q:cert_t. forall H:height_t. (forest_root_temp(Q,H) & Q.block.parent ~= block_t.hash(block_t.nil) & is_good(id)) -> (forall Hc:height_t. height_t.succ(Hc,chain_size_2cc) -> Q.block.parent = block_t.hash(blockchain_temp(Hc)))

    # invariant forall H1:height_t. forall H2:height_t. (height_t.succ(H1, H2) & H2 < chain_size & is_good(id) & H2 = chain_size_2cc) -> forall Q2:cert_t. ((forest_store_temp(Q2,H2)) -> (forest_root_temp(Q2,H2)))
    
    # invariant forall Q:cert_t. forall H:height_t. (forest_root_temp(Q,H) & Q.block.parent ~= block_t.hash(block_t.nil) & is_good(id)) -> (forall Hc:height_t. height_t.succ(Hc,chain_size_2cc) -> Q.block.parent = block_t.hash(blockchain(Hc)))

    # #invariant forall H1:height_t. forall H2:height_t. (height_t.succ(H1, H2) & H2 < chain_size & is_good(id) & H2 = chain_size_2cc) -> forall Q2:cert_t. ((forest_root_temp(Q2,H2)) -> (Q2.block.parent = block_t.hash(blockchain_temp(H1))))

    # invariant forall H:height_t. (is_good(id) & chain_size_2cc <= H & H < chain_size) -> exists Q:cert_t. (forest_store_temp(Q,H) & Q.block = blockchain(H) & forest_ancestor_temp(dc_basis_qc,dc_basis_hc,Q,H))

    # invariant forall H1:height_t. forall H2:height_t. (height_t.succ(H1, H2) & H2 < chain_size & is_good(id) & chain_size_2cc <= H1) -> H1 < chain_size

    # invariant forall H1:height_t. forall H2:height_t. (height_t.succ(H1, H2) & H2 < chain_size & is_good(id) & chain_size_2cc <= H1) -> exists Q1:cert_t. (forest_store_temp(Q1,H1) & forest_ancestor_temp(dc_basis_qc,dc_basis_hc,Q1,H1))

    # invariant forall H1:height_t. forall H2:height_t. (height_t.succ(H1, H2) & H2 < chain_size & is_good(id) & chain_size_2cc <= H1) -> exists Q2:cert_t. (forest_store_temp(Q2,H2) & forest_ancestor_temp(dc_basis_qc,dc_basis_hc,Q2,H2))

    # invariant forall H1:height_t. forall H2:height_t. (height_t.succ(H1, H2) & H2 < chain_size & is_good(id) & chain_size_2cc <= H1) -> exists Q1:cert_t. exists Q2:cert_t. (forest_store_temp(Q1,H1) & forest_store_temp(Q2,H2) & forest_ancestor_temp(dc_basis_qc,dc_basis_hc,Q1,H1) & forest_ancestor_temp(dc_basis_qc,dc_basis_hc,Q2,H2))

    # #invariant forall H2,H3:height_t. (is_good(id) & height_t.succ(H3,H2)) -> forall Q2,Q3:cert_t. (forest_ancestor_temp(dc_basis_qc,dc_basis_hc,Q2,H2) & forest_ancestor_temp(dc_basis_qc,dc_basis_hc,Q3,H3)) -> (Q1.block = blockchain(H1) & Q2.block = blockchain(H2) & forest_succ_temp(Q2,H2,Q3,H3))
    
    # invariant forall H2,H3:height_t. (is_good(id) & height_t.succ(H3,H2) & chain_size_2cc <= H3 & H2 < chain_size) ->  (forall Q2,Q3:cert_t. (forest_ancestor_temp(dc_basis_qc,dc_basis_hc,Q2,H2) & forest_ancestor_temp(dc_basis_qc,dc_basis_hc,Q3,H3)) -> forest_succ_temp(Q2,H2,Q3,H3))
    
    # invariant forall H2,H3:height_t. (is_good(id) & height_t.succ(H3,H2) & chain_size_2cc <= H3 & H2 < chain_size) ->  (forall Q2:cert_t. forall Q3:cert_t. (forest_ancestor_temp(dc_basis_qc,dc_basis_hc,Q2,H2) & forest_ancestor_temp(dc_basis_qc,dc_basis_hc,Q3,H3)) -> (blockchain(H2) = Q2.block & blockchain(H3) = Q3.block))

    # invariant forall H1:height_t. forall H2:height_t. (height_t.succ(H1, H2) & H2 < chain_size & is_good(id) & chain_size_2cc <= H1) -> (forall Q1:cert_t. forall Q2:cert_t. ( forest_store_temp(Q1,H1) & forest_store_temp(Q2,H2) & forest_ancestor_temp(dc_basis_qc,dc_basis_hc,Q1,H1) & forest_ancestor_temp(dc_basis_qc,dc_basis_hc,Q2,H2)) -> (Q1.block = blockchain(H1) & Q2.block = blockchain(H2) & forest_succ_temp(Q2,H2,Q1,H1)))

    # invariant forall H1:height_t. forall H2:height_t. (height_t.succ(H1, H2) & H2 < chain_size & is_good(id) & chain_size_2cc <= H1) -> (exists Q1:cert_t. exists Q2:cert_t. (Q1.block = blockchain(H1) & Q2.block = blockchain(H2) & forest_store_temp(Q1,H1) & forest_store_temp(Q2,H2) & forest_ancestor_temp(dc_basis_qc,dc_basis_hc,Q1,H1) & forest_ancestor_temp(dc_basis_qc,dc_basis_hc,Q2,H2)) & forest_succ_temp(Q2,H2,Q1,H1))

    # invariant forall Qd:cert_t. forall Qa:cert_t. forall Hd:height_t. forall Ha:height_t. (forest_store_temp(Qd,Hd) & forest_store_temp(Qa,Ha) & is_good(id)) -> (forest_succ_temp(Qd,Hd,Qa,Ha) -> (Qd.block.parent = block_t.hash(Qa.block) & height_t.succ(Ha,Hd)))

    # invariant forall H1:height_t. forall H2:height_t. (height_t.succ(H1, H2) & H2 < chain_size & is_good(id) & chain_size_2cc <= H1) -> (exists Q1:cert_t. exists Q2:cert_t. (Q1.block = blockchain(H1) & Q2.block = blockchain(H2) & forest_store_temp(Q1,H1) & forest_store_temp(Q2,H2) & forest_ancestor_temp(dc_basis_qc,dc_basis_hc,Q1,H1) & forest_ancestor_temp(dc_basis_qc,dc_basis_hc,Q2,H2)))

    # invariant forall H1:height_t. forall H2:height_t. (height_t.succ(H1, H2) & H2 < chain_size & is_good(id) & chain_size_2cc <= H1) -> blockchain_temp(H2).parent = block_t.hash(blockchain_temp(H1))

    # invariant forall Q:cert_t. forall H:height_t. (forest_store(Q,H) & Q.block.parent = block_t.hash(block_t.nil) & is_good(id)) -> H = 0

    # invariant (is_good(id) & (locked = cert_t.nil | (locked.block.parent = block_t.hash(block_t.nil)))) -> chain_size = 0
    
    # invariant chain_size = 0 -> forall H:height_t. ~height_t.succ(H,chain_size)
    
    # invariant forall Q:cert_t. forall H:height_t. (forest_root(Q,H) & Q.block.parent ~= block_t.hash(block_t.nil) & is_good(id)) -> (forall Hc:height_t. height_t.succ(Hc,chain_size) -> Q.block.parent = block_t.hash(blockchain(Hc)))

    # invariant forall Q:cert_t. forall H:height_t. (forest_root(Q,H) & Q.block.parent = block_t.hash(block_t.nil) & is_good(id)) -> (H = 0 & chain_size = 0)

    # invariant forall Q:cert_t. forall H:height_t. (forest_store(Q,H) & ~forest_root(Q,H) & is_good(id)) -> exists Qs:cert_t. exists Hs:height_t. forest_strictAncestor(Q,H,Qs,Hs)

    # invariant forall Q:cert_t. forall H:height_t. forall Qs:cert_t. forall Hs:height_t. (forest_strictAncestor(Q,H,Qs,Hs) & is_good(id)) -> exists Qss:cert_t. exists Hss:height_t. forest_succ(Q,H,Qss,Hss)

    # invariant forall Qd:cert_t. forall Qa:cert_t. forall Hd:height_t. forall Ha:height_t. (forest_store(Qd,Hd) & forest_store(Qa,Ha) & is_good(id)) -> ((Qd.block.parent = block_t.hash(Qa.block) & height_t.succ(Ha,Hd)) ->  forest_strictAncestor(Qd,Hd,Qa,Ha))

    # invariant forall H:height_t. ~height_t.succ(H,0)
    
    # invariant forall Qd:cert_t. forall Qa:cert_t. forall Hd:height_t. forall Ha:height_t. (forest_store(Qd,Hd) & forest_store(Qa,Ha) & is_good(id)) -> ((Qd.block.parent = block_t.hash(Qa.block) & height_t.succ(Ha,Hd)) ->  (forall Qaa:cert_t. forall Haa:height_t. (forest_ancestor(Qd,Hd,Qaa,Haa) & (Qd ~= Qaa | Hd ~= Haa)) -> forest_ancestor(Qa,Ha,Qaa,Haa)))

    # invariant forall Qd:cert_t. forall Qa:cert_t. forall Hd:height_t. forall Ha:height_t. (forest_store(Qd,Hd) & forest_store(Qa,Ha) & is_good(id)) -> ((Qd.block.parent = block_t.hash(Qa.block) & height_t.succ(Ha,Hd)) ->  forest_succ(Qd,Hd,Qa,Ha))

    #invariant forall Qf:cert_t. forall Hf:height_t. (is_good(id) & forest_store(Qf,Hf) & ~forest_root(Qf,Hf)) -> exists Qs:cert_t. exists Hs:height_t. forest_succ(Qf,Hf,Qs,Hs)

    #invariant forall Qd:cert_t. forall Hd:height_t. forall Qa:cert_t. forall Ha:height_t. forall Hi:height_t. (is_good(id) & forest_ancestor(Qd,Hd,Qa,Ha) & Ha <= Hi & Hi <= Hd) -> exists Qi:cert_t. (forest_ancestor(Qd,Hd,Qi,Hi) & forest_ancestor(Qi,Hi,Qa,Ha))