#lang ivy1.8

include types
include quorum_verification
include moonshot

isolate only_cstd_blocks = {
    invariant [genesis_block_cstd] block_t.cstd(block_t.genesis)
    
    invariant [prepare_o_cstd] verify_quorum.processor_sent_prepare_o(N,B) & is_good(N) -> B = block_t.unused | block_t.cstd(B)

    invariant [locked_block_cstd] qc_t.block(verify_quorum.processor(N).qc_l,B_l) & is_good(N) -> block_t.cstd(B_l)

    invariant [prepare_n_cstd] verify_quorum.processor_sent_prepare_n(N,B) & is_good(N) -> block_t.cstd(B)

    invariant [prepare_f_cstd] verify_quorum.processor_sent_prepare_f(N,B) & is_good(N) -> block_t.cstd(B)
} with block_t, verify_quorum, qc_t, qc_t_properties

isolate basic_validities = {
    invariant [qc_l_valid] verify_quorum.qc_sanity_check(verify_quorum.processor(N).qc_l) & verify_quorum.qc_has_quorum(verify_quorum.processor(N).qc_l)
} with verify_quorum, block_t, qc_t, qc_t_properties

isolate tc_qc_o_intersection = {

    invariant forall Q_t,Q_q:quorum_t. exists N:process_index_t. quorum_t.member(Q_q,N) & quorum_t.member(Q_t,N) & is_good(N)

    invariant verify_quorum.tc_sanity_check(TC) & verify_quorum.tc_has_quorum(TC) & tc_t.quorum(TC,Q_t) & verify_quorum.qc_sanity_check(QC) & verify_quorum.qc_has_quorum_o(QC) & qc_t.quorum(QC,Q_q) -> exists N:process_index_t. quorum_t.member(Q_q,N) & quorum_t.member(Q_t,N) & is_good(N)

    # attribute macro_finder=false
} with verify_quorum, block_t, quorum_intersection_axiom, every_quorum_good

isolate tc_r_no_po_rs_quorum_m1 = {
    property block_t_properties.round_exists(B) | ~ block_t_properties.round_exists(B)

    invariant verify_quorum.processor_sent_prepare_o(N,B) & is_good(N) & block_t.round(B,R) & qc_t.block(verify_quorum.processor(N).qc_l,B_l) & block_t.round(B_l,R_l) & round_t.succ(Rp,R) -> Rp <= R_l 

    invariant qc_t.block(verify_quorum.processor(N).qc_l,B_l) & block_t.round(B_l,R_l) -> R_l < verify_quorum.processor(N).r_c

    invariant [honest_sends_prepare_o_timeout] verify_quorum.tc_sanity_check(TC) & verify_quorum.tc_has_quorum(TC) & tc_t.round(TC,R_tc) & tc_t.quorum(TC,Q_t) & quorum_t.member(Q_t,N) & is_good(N) & verify_quorum.qc_sanity_check(QC) & verify_quorum.qc_has_quorum_o(QC) & qc_t.block(QC,B) & qc_t.quorum(QC,Q_q) & quorum_t.member(Q_q,N) -> ((exists QC_to:qc_t. verify_quorum.processor_sent_timeout(N,R_tc,QC_to)) & verify_quorum.processor_sent_prepare_o(N,B))

    invariant verify_quorum.processor_sent_timeout(N,R_tc,QC_to) & is_good(N) -> R_tc <= verify_quorum.processor(N).t_l

    invariant [prepare_o_not_succ_timeout] verify_quorum.processor_sent_timeout(N,R_tc,QC_to) & verify_quorum.processor_sent_prepare_o(N,B) & is_good(N) & block_t.round(B,R) -> ~ round_t.succ(R_tc,R)

    # attribute macro_finder=false
} with block_t, verify_quorum, round_t, only_cstd_blocks.prepare_o_cstd, only_cstd_blocks.locked_block_cstd, block_t_properties.genesis_round_0, qc_t_properties, block_t_properties.block_t_inv_round_unique, basic_validities.qc_l_valid, block_t_properties.block_t_inv_round_exists, block_t_properties.round_exists

isolate tc_r_no_po_rs_quorum = {

    invariant verify_quorum.tc_sanity_check(TC) & verify_quorum.tc_has_quorum(TC) & tc_t.round(TC,R_tc) & verify_quorum.qc_sanity_check(QC) & verify_quorum.qc_has_quorum_o(QC) & qc_t.block(QC,B) & block_t.round(B,R) -> ~ round_t.succ(R_tc,R)

    attribute macro_finder=false

} with block_t, verify_quorum, round_t, tc_r_no_po_rs_quorum_m1.honest_sends_prepare_o_timeout, tc_r_no_po_rs_quorum_m1.prepare_o_not_succ_timeout, tc_qc_o_intersection

isolate qc_o_qc_n_m1 = {
    invariant verify_quorum.processor_sent_prepare_o(N,verify_quorum.processor(N).b_o)

    invariant verify_quorum.processor(N).b_o ~= block_t.unused -> block_t.round(verify_quorum.processor(N).b_o,verify_quorum.processor(N).a_o)

    invariant [ao_an_le_rc] verify_quorum.processor(N).a_o <= verify_quorum.processor(N).r_c & verify_quorum.processor(N).a_n <= verify_quorum.processor(N).r_c

    invariant is_good(N) & verify_quorum.processor_sent_prepare_o(N,B) & block_t.round(B,R) -> verify_quorum.processor(N).possessed_optimistic_for_round(R)

    invariant [optimistic_round_safety] is_good(N) & verify_quorum.processor_sent_prepare_o(N,B1) & verify_quorum.processor_sent_prepare_o(N,B2) & block_t.round(B1,R1) & block_t.round(B2,R2) & R1 = R2 -> B1 = B2

    invariant verify_quorum.processor_sent_prepare_o(N,B) & is_good(N) -> (B = block_t.unused | block_t.cstd(B))

    invariant forall B:block_t. forall R:round_t. forall N:process_index_t. is_good(N) & verify_quorum.processor_sent_prepare_o(N,B) & block_t.round(B,R) -> R <= verify_quorum.processor(N).a_o

    invariant [an_highest] forall B:block_t. forall R:round_t. forall N:process_index_t. is_good(N) & verify_quorum.processor_sent_prepare_n(N,B) & block_t.round(B,R) -> R <= verify_quorum.processor(N).a_n

    invariant [honest_vote] is_good(N) & verify_quorum.processor_sent_prepare_o(N,B1) & verify_quorum.processor_sent_prepare_n(N,B2) & block_t.round(B1,R1) & block_t.round(B2,R2) & R1 = R2 -> B1 = B2

    # attribute macro_finder=false
} with block_t, round_t, verify_quorum, quorum_intersection_axiom, block_t_properties.unused_not_cstd, block_t_properties.genesis_cstd, block_t_properties.round_only_for_cstd, block_t_properties.block_t_inv_round_unique, only_cstd_blocks.prepare_n_cstd

isolate qc_o_qc_n = {

    invariant verify_quorum.qc_sanity_check(QCo) & verify_quorum.qc_sanity_check(QCn) & verify_quorum.qc_has_quorum_o(QCo) & verify_quorum.qc_has_quorum_n(QCn) & qc_t.block(QCo,Bo) & qc_t.block(QCn,Bn) & block_t.round(Bo,Ro) & block_t.round(Bn,Rn) & Ro = Rn -> Bo = Bn

    # attribute macro_finder=false

} with block_t, round_t, verify_quorum, quorum_intersection_axiom, qc_o_qc_n_m1.honest_vote

isolate round_safety_m1 = {
    invariant verify_quorum.processor(N).a_f <= verify_quorum.processor(N).r_c

    invariant is_good(N) & verify_quorum.processor_sent_prepare_n(N,B) & block_t.round(B,R) -> verify_quorum.processor(N).possessed_normal_for_round(R)

    invariant is_good(N) & verify_quorum.processor_sent_prepare_n(N,B1) & verify_quorum.processor_sent_prepare_n(N,B2) & block_t.round(B1,R1) & block_t.round(B2,R2) & R1 = R2 -> B1 = B2

    invariant is_good(N) & verify_quorum.processor_sent_prepare_f(N,B) & block_t.round(B,R) -> verify_quorum.processor(N).possessed_fallback_for_round(R)

    invariant is_good(N) & verify_quorum.processor_sent_prepare_f(N,B1) & verify_quorum.processor_sent_prepare_f(N,B2) & block_t.round(B1,R1) & block_t.round(B2,R2) & R1 = R2 -> B1 = B2

    invariant [af_highest] forall B:block_t. forall R:round_t. forall N:process_index_t. is_good(N) & verify_quorum.processor_sent_prepare_f(N,B) & block_t.round(B,R) -> R <= verify_quorum.processor(N).a_f

    invariant is_good(N) & verify_quorum.processor_sent_prepare_f(N,Bf) & verify_quorum.processor_sent_prepare_n(N,Bn) & block_t.round(Bf,Rf) & block_t.round(Bn,Rn) & Rf = Rn -> Bf = Bn
} with block_t, round_t, verify_quorum, qc_o_qc_n_m1.ao_an_le_rc, qc_o_qc_n_m1.optimistic_round_safety, block_t_properties.genesis_cstd, block_t_properties.block_t_inv_round_unique, block_t_properties.genesis_round_0, only_cstd_blocks.prepare_n_cstd, only_cstd_blocks.prepare_f_cstd, qc_o_qc_n_m1.an_highest

isolate round_safety_m2 = {

    relation processor_sent_prepare_f_tc(N:process_index_t, B:block_t, TC:tc_t)

    after init {
        processor_sent_prepare_f_tc(N,B,TC) := false;
    }

    before verify_quorum.processor.byzantine_send(id:process_index_t, m:msg) {
        if m.kind = msg_kind.prepare_f {
            processor_sent_prepare_f_tc(m.src, m.block, m.tc) := true;
        }
    }

    before verify_quorum.processor.fallback_proposal_processing(id:process_index_t, b_pr:block_t, tc:tc_t) {
            processor_sent_prepare_f_tc(id,b_pr,tc) := true;
    }

    invariant processor_sent_prepare_f_tc(N,B,TC) & is_good(N) -> block_t.cstd(B)

    invariant processor_sent_prepare_f_tc(N,B,TC) & is_good(N) & block_t.round(B,R_b) & tc_t.round(TC,R_tc) -> round_t.succ(R_tc,R_b)

    invariant verify_quorum.processor_sent_prepare_f(N,B) -> exists TC:tc_t. processor_sent_prepare_f_tc(N,B,TC)
    
    invariant verify_quorum.qc_sanity_check(QCf) & verify_quorum.qc_has_quorum_f(QCf) & qc_t.block(QCf,Bf) & block_t.round(Bf,Rf) & verify_quorum.qc_sanity_check(QCo) & verify_quorum.qc_has_quorum_o(QCo) & qc_t.block(QCo,Bo) & block_t.round(Bf,Rf) & round_t.succ(R_tc,Rf) -> exists N:process_index_t. exists TC:tc_t. processor_sent_prepare_f_tc(N,Bf,TC) #~ block_t.round(Bo,Rf)

} with block_t, round_t, verify_quorum, quorum_intersection_axiom, every_quorum_good, round_safety_m1, tc_r_no_po_rs_quorum, block_t_properties.block_t_inv_round_unique

isolate test = verify_quorum with round_safety_m2, block_t, round_t, block_t_properties.block_t_inv_round_unique, block_t_properties.genesis_round_0, block_t_properties.unused_not_cstd, block_t_properties.genesis_cstd