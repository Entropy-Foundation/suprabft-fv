#lang ivy1.8

include types
include network
include global_view
include local_view

isolate global_view_instance = {
    axiom exists R:round_t. round_t.succ(0,R)

    #property block_t.round_exists(B) | ~ block_t.round_exists(B)
    
    instantiate global_view

    property process_voted(N,B) | ~ process_voted(N,B)
    property proposal_f_valid(P) | ~ proposal_f_valid(P)
    property tc_valid(TC) | ~ tc_valid(TC)
    #property block_t.parent_exists(B) | ~ block_t.parent_exists(B)
} with round_t, height_t, block_t, prepare_t, qc_t, tc_t, timeout_t, proposal_f_t, proposal_n_t

isolate gv_action_requires = {
    before global_view_instance.enter_round(n:process_index_t,r:round_t,b:block_t,tc:tc_t, qc_observed:bool) {
        #require r > global_view_instance.process_in_round(n);
        require global_view_instance.process_in_round(n) <= r;#_#

        if qc_observed {
            require global_view_instance.process_received_qc(n,b);
            require block_t_conv.block_pred_pred(b,r) & block_t_conv.block_lt_predecessor(b,r);
            require block_t_conv.block_lt_predecessor(global_view_instance.process_locked(n),r);
            #require forall Rq:round_t. block_t.round(global_view_instance.process_locked(n),Rq) -> (forall QC:qc_t. ~ global_view_instance.process_sent_timeout(N,Rq,QC));
        }
        else {
            require global_view_instance.process_received_tc(n,tc);
            require tc_t_conv.tc_pred_pred(tc,r);
        }
    }

    before global_view_instance.receive_normal_proposal(n:process_index_t, p:proposal_n_t) {
        require global_view_instance.proposal_n_valid(p);#_#

    }

    before global_view_instance.receive_fallback_proposal(n:process_index_t, p:proposal_f_t) {

        require global_view_instance.proposal_f_valid(p);#_#
    }

    before global_view_instance.vote_normal(n:process_index_t, p:proposal_n_t) {
        require global_view_instance.process_received_normal_proposal(n,p);#_#
        require ~is_good(n) | (forall B:block_t. forall Rb:round_t. proposal_n_t.block(p,B) & block_t.round(B,Rb) -> round_t.succ(Rb,global_view_instance.process_in_round(n)));#_#
        require ~is_good(n) | forall B:block_t. proposal_n_t.block(p,B) -> block_t.parent(B,global_view_instance.process_locked_completely(n)) & global_view_instance.no_timeout_for_block_round(n,global_view_instance.process_locked_completely(n));#_#
        require ~is_good(n) | forall B,Bvn:block_t. forall Rvn:round_t. global_view_instance.process_voted_normal(n,Bvn) & block_t.round(Bvn,Rvn) & proposal_n_t.block(p,B) & block_t.round(B,Rb)-> Rvn < Rb;#_#

    }

    before global_view_instance.vote_fallback(n:process_index_t, p:proposal_f_t, q:quorum_t) {
        require global_view_instance.proposal_f_valid(p);#_#
        require ~is_good(n) | (proposal_f_t.block(p,B) & block_t.round(B,Rb) -> round_t.succ(Rb,global_view_instance.process_in_round(n)));#_#
        require proposal_f_t.tc(p,TC) -> tc_t.quorum(TC,q);#_#
        require proposal_f_t.block(p,B) & proposal_f_t.tc(p,TC) & block_t.round(B,Rb) & tc_t.round(TC,Rt) -> round_t.succ(Rt,Rb);#_#
        #require ~is_good(n) | proposal_f_t.block(p,Br) & block_t.parent(Br,Bp) & block_t.round(Bp,Rp) & proposal_f_t.tc(p,TC) & tc_t.timeout(TC,T) & timeout_t.qc(T,QC) & qc_t.block(QC,Bq) & block_t.round(Bq,Rq) -> Rq <= Rp;#_#_#
        require ~is_good(n) | forall B,Bvf:block_t. forall Rvf:round_t. global_view_instance.process_voted_fallback(n,Bvf,Q) & block_t.round(Bvf,Rvf) & proposal_f_t.block(p,B) & block_t.round(B,Rb)-> Rvf < Rb;#_#
    }

    before global_view_instance.receive_qc(n:process_index_t, b:block_t, qc:qc_t) {
        require global_view_instance.qc_valid(qc);#_#
        require qc_t.block(qc,b);#_#
        require block_t.round(b,R) & round_t.succ(R,Rs) -> Rs < global_view_instance.process_in_round(n);#_#


    }

    before global_view_instance.lock(n:process_index_t, b:block_t, qc:qc_t) {
        require block_t.cstd(b);#_#
        require global_view_instance.qc_valid(qc);#_#
        require qc_t.block(qc, b);#_#
        require global_view_instance.process_received_qc(n,b);#_#
        require forall R1,R2:round_t. block_t.round(global_view_instance.process_locked_completely(n), R1) & block_t.round(b, R2) -> R1 < R2;#_#
        require forall Rq,Rs:round_t. block_t.round(b,Rq) & round_t.succ(Rq,Rs)-> global_view_instance.process_in_round(n) <= Rs;#_#
        require forall Rq:round_t. block_t.round(b,Rq) -> (forall QC:qc_t. ~ global_view_instance.process_sent_timeout(N,Rq,QC));#_#

    }

    before global_view_instance.received_tc_fplusone(n:process_index_t, tc:tc_fplusone_t) {
        require global_view_instance.tc_fplusone_valid(tc);

        require forall N:process_index_t. forall Rt:round_t. forall QC:qc_t. forall Q:quorum_fplusone_t. forall T:timeout_t. forall B:block_t. tc_fplusone_t.quorum(tc,Q) & quorum_fplusone_t.member(Q,N) & tc_fplusone_t.round(tc,Rt) & tc_fplusone_t.timeout(tc,T) & timeout_t.qc(T,QC) & timeout_t.node(T,N) & is_good(N) & qc_t.block(QC,B) -> global_view_instance.process_sent_timeout(N,Rt,QC) & global_view_instance.process_received_qc(n,B);
    }
} with global_view_instance, block_t, proposal_n_t, timeout_t, proposal_f_t

isolate verify_gv_action_requires = global_view_instance with gv_action_requires, block_t, proposal_n_t, timeout_t, proposal_f_t, round_t

isolate gv_action_received_tc_requires = {

    before global_view_instance.received_tc(n:process_index_t, tc:tc_t) {
        require global_view_instance.tc_valid(tc);#_#

        require forall N:process_index_t. forall Rt:round_t. forall QC:qc_t. forall Q:quorum_t. forall T:timeout_t. forall B:block_t. tc_t.quorum(tc,Q) & is_good(N) & quorum_t.member(Q,N) & tc_t.round(tc,Rt) & tc_t.timeout(tc,T) & timeout_t.qc(T,QC) & timeout_t.node(T,N) & qc_t.block(QC,B)-> global_view_instance.process_sent_timeout(N,Rt,QC) & global_view_instance.process_received_qc(n,B);
    }
    
} with global_view_instance, block_t, proposal_n_t, timeout_t, proposal_f_t

isolate gv_action_timeout_requires = {

    before global_view_instance.timeout(n:process_index_t, r:round_t, maxCommitQC:qc_t, tc_fp1:tc_fplusone_t, tc:tc_t, kind:to_kind) {
        assume global_view_instance.qc_valid(maxCommitQC);#_#
        assume qc_t.block(maxCommitQC,B) & block_t.round(B,R) -> R < r;#_#
        assume round_t.succ(Rp,global_view_instance.process_in_round(n)) & is_good(n) & block_t.round(global_view_instance.process_locked(n),Rl) & global_view_instance.process_locked(n) ~= block_t.genesis ->  Rl < Rp & Rp <= r;#_#Rl < Rp & Rp <= r
        assume round_t.succ(Rp,global_view_instance.process_in_round(n)) & is_good(n) & block_t.round(global_view_instance.process_locked_completely(n),Rl) & global_view_instance.process_locked_completely(n) ~= block_t.genesis ->  Rl < Rp & Rp <= r;#_#
        assume round_t.succ(Rp,global_view_instance.process_in_round(n)) & is_good(n) & gv_normal_vote_requires_gl_candidate.gl_candidate(n,B) & block_t.round(B,R) & B ~= block_t.genesis -> R < Rp & Rp <= r;
        assume ~ is_good(n) | ~global_view_instance.process_sent_timeout(n,r,QC);#_#
        assume r ~= 0;

    }

}

isolate gv_action_timeout_requires_case_split = {

    before global_view_instance.timeout(n:process_index_t, r:round_t, maxCommitQC:qc_t, tc_fp1:tc_fplusone_t, tc:tc_t, kind:to_kind) {
        # require ~ is_good(n) | ((round_t.succ(r,global_view_instance.process_in_round(n))) | (global_view_instance.tc_fplusone_valid(tc_fp1) & tc_fplusone_t.round(tc_fp1,r)) | (global_view_instance.tc_valid(tc) & tc_t.round(tc,r)))

        assume ~ is_good(n) | (kind = to_kind.timer_expire -> round_t.succ(r,global_view_instance.process_in_round(n)));

        assume ~ is_good(n) | (kind = to_kind.timeout_sync -> global_view_instance.tc_fplusone_valid(tc_fp1) & tc_fplusone_t.round(tc_fp1,r));

        assume ~ is_good(n) | (kind = to_kind.tc_received -> global_view_instance.tc_valid(tc) & tc_t.round(tc,r));
    }
}

isolate gv_action_commit_requires = {

    before global_view_instance.commit(n:process_index_t, commit_candidate:block_t, last_committed:block_t) {
        require global_view_instance.process_last_committed(n) = last_committed;
        require block_t.ancestor(commit_candidate,Ba) -> (block_t.ancestor(Ba,global_view_instance.process_last_committed(n)) | Ba = global_view_instance.process_last_committed(n) | block_t.ancestor(global_view_instance.process_last_committed(n),Ba)) & block_t.cstd(Ba);
        require global_view_instance.eligible_to_commit(n,commit_candidate);

    }

} with global_view_instance, block_t, proposal_n_t, timeout_t, proposal_f_t

isolate gv_before_vote_fallback_parent_maxtc = {
    before global_view_instance.vote_fallback(n:process_index_t, p:proposal_f_t, q:quorum_t) {
    require (~is_good(n)) | (proposal_f_t.block(p,Br) & block_t.parent(Br,Bp) & block_t.round(Bp,Rp) & proposal_f_t.tc(p,TC) & tc_t.timeout(TC,T) & timeout_t.qc(T,QC) & qc_t.block(QC,Bq) & block_t.round(Bq,Rq) -> Rq <= Rp);
    }
} with global_view_instance, block_t, proposal_n_t, timeout_t, proposal_f_t

isolate gv_basic_validities = {

    #property block_t.parent_exists(B) | ~ block_t.parent_exists(B)

    invariant [gv_inv_cur_round_0] 0 < global_view_instance.process_in_round(N)

    invariant global_view_instance.tc_valid(TC) & tc_t.round(TC,R) -> 0 < R

    invariant global_view_instance.tc_fplusone_valid(TC) & tc_fplusone_t.round(TC,R) -> 0 < R

    invariant [gv_inv_no_to_for_0] global_view_instance.process_sent_timeout(N,R,QC) & is_good(N) -> 0 < R

    invariant [gv_inv_genesis_qc_valid] global_view_instance.qc_valid(qc_t.genesis)

    invariant [gv_inv_valid_received_n_prop] global_view_instance.process_received_normal_proposal(N,P) -> global_view_instance.proposal_n_valid(P)
    invariant global_view_instance.process_received_fallback_proposal(N,P) -> global_view_instance.proposal_f_valid(P)
    invariant global_view_instance.process_voted(N, block_t.genesis)
    invariant [gv_voted_n_block_cstd] global_view_instance.process_voted(N, B) -> block_t.cstd(B)
    invariant [gv_voted_f_block_cstd] global_view_instance.process_voted_fallback(N, B, QC) -> block_t.cstd(B)
    invariant [gv_inv_received_qc_cstd] global_view_instance.process_received_qc(N,B) -> block_t.cstd(B)
    invariant block_t.cstd(global_view_instance.process_locked(N))
    invariant [gv_inv_locked_cpl_is_cstd] block_t.cstd(global_view_instance.process_locked_completely(N))
    invariant [gv_inv_committed_is_qc] global_view_instance.process_committed(N, B) -> block_t.cstd(B) & global_view_instance.process_received_qc(N,B)
    invariant [gv_inv_last_committed_is_committed] global_view_instance.process_committed(N,global_view_instance.process_last_committed(N))
    invariant [gv_inv_last_committed_ancestor_is_committed] block_t.ancestor(global_view_instance.process_last_committed(N), B) -> global_view_instance.process_committed(N,B)
    invariant global_view_instance.process_sent_timeout(N, R, QC) -> global_view_instance.qc_valid(QC)
    invariant [gv_inv_received_tc_valid] global_view_instance.process_received_tc(N,TC) -> global_view_instance.tc_valid(TC)
} with round_t, height_t, block_t, prepare_t, qc_t, tc_t, timeout_t, proposal_f_t, proposal_n_t, global_view_instance, gv_action_requires, gv_action_commit_requires, every_quorum_good, every_quorum_fplusone_good#,ancestor_transitive_closure_block

isolate gv_basic_consequences = {

    invariant [gv_inv_voted_n_cur_round] is_good(N) & global_view_instance.process_voted_normal(N,B) & block_t.round(B,R) -> R < global_view_instance.process_in_round(N)

    invariant [gv_inv_voted_f_cur_round] is_good(N) & global_view_instance.process_voted_fallback(N,B,Q) & block_t.round(B,R) -> R < global_view_instance.process_in_round(N)

    invariant global_view_instance.process_completed_qc_processing(N,B) -> global_view_instance.process_received_qc(N,B)

    invariant global_view_instance.process_completed_qc_processing(N,B) & B ~= block_t.genesis -> block_t_conv.block_lt_predecessor(B,global_view_instance.process_in_round(N))

    invariant [gv_inv_first_locked_ge_locked_cpl] block_t.round(global_view_instance.process_locked_completely(N),Rc) & block_t.round(global_view_instance.process_locked(N),R) -> Rc <= R

    invariant [gv_inv_locked_lt_pred_rc] global_view_instance.process_locked_completely(N) ~= block_t.genesis -> block_t_conv.block_lt_predecessor(global_view_instance.process_locked_completely(N),global_view_instance.process_in_round(N))

    invariant [gv_inv_fallback_quorum_timeout] global_view_instance.process_voted_fallback(N,B,Q) & block_t.round(B,Rv) & round_t.succ(Rm,Rv) & quorum_t.member(Q,N1) -> exists QC:qc_t. global_view_instance.process_sent_timeout(N1,Rm,QC)

    ###### invariants related to process_received_normal_proposal
    invariant [gv_normal_p_received_valid] global_view_instance.process_received_normal_proposal(N,P) -> global_view_instance.proposal_n_valid(P)

    ###### invariants related to process_received_fallback_proposal
    
    invariant [gv_inv_timeout_qc_lesser] global_view_instance.process_sent_timeout(N,Rt,QC) & qc_t.block(QC,B) & block_t.round(B,Rq) -> Rq < Rt

    ### invariants related to process_voted_normal
    invariant [gv_inv_normal_parent_pred] global_view_instance.process_voted_normal(N,B) & block_t.parent(B,Bp) & block_t.round(B,R) & block_t.round(Bp,Rp) -> (B = block_t.genesis | round_t.succ(Rp,R))

    ### invariants related to process_voted_fallback
    invariant [gv_inv_fallback_parent_lesser] global_view_instance.process_voted_fallback(N,Bv,Q) & block_t.parent(Bv,Bp) & block_t.round(Bv,Rv) & block_t.round(Bp,Rp) & round_t.succ(Rp,Rt) -> Rt < Rv
    
    ### invariants related to process_voted
    ### invariants related to process_locked

    ### invriants related to process_received_qc
    invariant [gv_inv_locked_qc_received] global_view_instance.process_received_qc(N, global_view_instance.process_locked(N))
    
    invariant [gv_inv_locked_cpl_qc_received] global_view_instance.process_received_qc(N, global_view_instance.process_locked_completely(N))

    ### invariants related to process_sent_timeout

    invariant [gv_inv_timeout_unique] is_good(N) & global_view_instance.process_sent_timeout(N,R,QC1) & global_view_instance.process_sent_timeout(N,R,QC2) -> QC1 = QC2

    invariant [gv_first_lock_no_to] global_view_instance.process_sent_timeout(N,R,QC) & is_good(N) -> (forall Rl:round_t. block_t.round(global_view_instance.process_locked(N),Rl) -> Rl ~= R)

    invariant [gv_lock_no_to] global_view_instance.process_sent_timeout(N,R,QC) & is_good(N) -> (forall Rl:round_t. block_t.round(global_view_instance.process_locked_completely(N),Rl) -> Rl ~= R)

    attribute macro_finder=false
} with round_t, height_t, block_t, block_t_conv, prepare_t, qc_t, tc_t, timeout_t, proposal_f_t, proposal_n_t, global_view_instance, gv_action_requires, gv_basic_validities.gv_inv_cur_round_0, round_predecessor

isolate gv_fallback_p_parent_maxQC_m1 = {

    relation round_max_for_tc(TC:tc_t, R:round_t)

    definition round_max_for_tc(TC, R) = forall T:timeout_t. forall QC:qc_t. forall B:block_t. forall Rq:round_t. tc_t.timeout(TC,T) & timeout_t.qc(T,QC) & qc_t.block(QC,B) & block_t.round(B,Rq) -> Rq <= R

    relation round_max_for_timeout_quorum(Q:quorum_t, Rt:round_t, R:round_t)
    
    definition round_max_for_timeout_quorum(Q,Rt,R) = forall N:process_index_t. forall QC:qc_t. forall Bq:block_t. forall Rq:round_t. quorum_t.member(Q,N) & is_good(N) & global_view_instance.process_sent_timeout(N,Rt,QC) & qc_t.block(QC,Bq) & block_t.round(Bq,Rq) -> Rq <= R
    
    property forall TC:tc_t. forall Rt,Rp:round_t. global_view_instance.quorum_is_subset(TC) & tc_t.round(TC,Rt) & round_max_for_tc(TC,Rp) -> (forall Q:quorum_t. tc_t.quorum(TC,Q) -> round_max_for_timeout_quorum(Q,Rt,Rp))

    # attribute macro_finder=false

} with round_t, height_t, block_t, prepare_t, qc_t, tc_t, timeout_t, proposal_f_t, proposal_n_t, global_view_instance,gv_before_vote_fallback_parent_maxtc, gv_action_requires, gv_basic_validities, gv_basic_consequences.gv_inv_fallback_quorum_timeout, gv_basic_consequences.gv_normal_p_received_valid, gv_basic_consequences.gv_inv_timeout_unique

isolate gv_fallback_p_parent_maxQC = {

    property block_t.parent_exists(B) | ~ block_t.parent_exists(B)
    property block_t.round_exists(B) | ~ block_t.round_exists(B)

    property global_view_instance.proposal_n_valid(P) | ~ global_view_instance.proposal_n_valid(P)

    # same block cannot be received as a normal proposal by one process and as fallback proposal by another/same process
    invariant global_view_instance.process_received_normal_proposal(Nn,Pn) & global_view_instance.process_received_fallback_proposal(Nf,Pf) & proposal_n_t.block(Pn,Bn) & proposal_f_t.block(Pf,Bf) -> Bn ~= Bf

    invariant global_view_instance.process_voted_fallback(N,B,Q) & is_good(N) & block_t.parent(B,Bp) & block_t.round(Bp,Rp) & block_t.round(B,Rv) & round_t.succ(Rm,Rv) & quorum_t.member(Q,N1) & is_good(N1) & global_view_instance.process_sent_timeout(N1,Rm,QC) & qc_t.block(QC,Bq) & block_t.round(Bq,Rq) -> Rq <= Rp

    # attribute macro_finder=false

} with round_t, height_t, block_t, prepare_t, qc_t, tc_t, timeout_t, proposal_f_t, proposal_n_t, global_view_instance,gv_fallback_p_parent_maxQC_m1, gv_action_requires, gv_basic_validities, gv_basic_consequences.gv_inv_fallback_quorum_timeout, gv_basic_consequences.gv_normal_p_received_valid, gv_basic_consequences.gv_inv_timeout_unique, gv_before_vote_fallback_parent_maxtc

isolate gv_before_to_no_normal_vote = {
    before global_view_instance.timeout(n:process_index_t, r:round_t, locked:qc_t) {

        require ~ is_good(n) | (round_t.succ(R,Rs) & block_t.round(B,Rs) & global_view_instance.process_voted_normal(n,B) -> Rs < global_view_instance.process_in_round(n));

        require ~ is_good(n) | (round_t.succ(R,Rs) & block_t.round(B,Rs) & global_view_instance.process_voted_normal(n,B) -> R < r);
    }
} with global_view_instance, block_t, proposal_n_t, timeout_t, proposal_f_t

isolate lv_verify_before_to_no_normal_vote = local_view_instance with gv_before_to_no_normal_vote, global_view_instance, round_t, height_t, block_t, proposal_n_t, prepare_t, genesis_member, qc_t, timeout_t,proposal_f_t,gv_basic_consequences.gv_inv_voted_n_cur_round, lv_validity_invariants.lv_rc_m1_pred_rc, lv_basic_invariants.lv_process_in_round_r_c#, lv_process_in_round_r_c

isolate gv_no_normal_vote_after_timeout = {

    property block_t.round_exists(B) | ~ block_t.round_exists(B)

    #invariant is_good(N) & round_t.succ(R,Rs) & block_t.round(B,Rs) & global_view_instance.process_voted_normal(N,B) & round_t.succ(Rp,global_view_instance.process_in_round(N)) & Rp <= Rt -> R < Rt

    invariant is_good(N) & round_t.succ(R,Rs) & block_t.round(B,Rs) & global_view_instance.process_voted_normal(N,B) -> (forall QC:qc_t. ~ global_view_instance.process_sent_timeout(N,R,QC))

    # if N sends a timeout for R, it will never send a normal vote any block proposed in R+1
    invariant [gv_inv_after_to_no_normal_vote] is_good(N) & global_view_instance.process_sent_timeout(N,R,QC) -> (forall B:block_t. forall Rs:round_t. round_t.succ(R,Rs) & block_t.round(B,Rs) -> ~ global_view_instance.process_voted_normal(N,B))

    #attribute macro_finder=false

} with round_t, height_t, block_t, prepare_t, qc_t, tc_t, timeout_t, proposal_f_t, proposal_n_t, global_view_instance, gv_action_requires, gv_basic_consequences.gv_inv_voted_n_cur_round, gv_before_to_no_normal_vote, gv_basic_consequences.gv_lock_no_to, gv_basic_validities.gv_inv_valid_received_n_prop, gv_basic_validities.gv_inv_no_to_for_0

isolate gv_quorum_of_normal_votes = {
    # quorum of normal votes
    relation qonv(B:block_t)
    definition qonv(B) = exists Q:quorum_t. forall N:process_index_t. is_good(N) & quorum_t.member(Q,N) -> global_view_instance.process_voted_normal(N,B)

    # quorum of time out messages for round r
    relation qoto(R:round_t)
    definition qoto(R) = exists Q:quorum_t. forall N:process_index_t. is_good(N) & quorum_t.member(Q,N) -> exists QC:qc_t. global_view_instance.process_sent_timeout(N,R,QC)

    invariant qoto(R) & round_t.succ(R,Rs) & block_t.round(B,Rs) -> ~ qonv(B)

    #attribute macro_finder=false
} with quorum_intersection_axiom, round_t, height_t, block_t, prepare_t, qc_t, tc_t, timeout_t, proposal_f_t, proposal_n_t, global_view_instance, gv_no_normal_vote_after_timeout.gv_inv_after_to_no_normal_vote#, gv_action_requires, gv_basic_validities, gv_basic_consequences

isolate gv_normal_vote_requires_gl_candidate = {
    property block_t.round_exists(B) | ~ block_t.round_exists(B)

    # process N locked B whilst in B.r +1 before sending a timeout for R, so it is a candidate for global commit
    relation gl_candidate(N:process_index_t, B:block_t)

    after init {
        gl_candidate(N,B) := B = block_t.genesis;
    }

    after global_view_instance.enter_round(n:process_index_t,r:round_t,b:block_t,tc:tc_t, qc_observed:bool) {
        if qc_observed {
            gl_candidate(n,global_view_instance.process_locked_completely(n)) := true;
        }
    }

    invariant gl_candidate(N,global_view_instance.process_locked_completely(N))
    
    invariant [gv_inv_gl_candidate_lte_locked_cpl] gl_candidate(N,B) & block_t.round(B,Rg) & block_t.round(global_view_instance.process_locked_completely(N), Rl) -> Rg <= Rl

    invariant [gv_inv_gl_candidate_cstd] gl_candidate(N,B) -> block_t.cstd(B)

    #attribute macro_finder=false

}  with block_t, proposal_n_t, round_t, prepare_t, timeout_t, proposal_f_t, quorum_t, qc_t,  global_view_instance, gv_action_requires, gv_basic_validities, gv_basic_consequences.gv_inv_first_locked_ge_locked_cpl

isolate gv_later_normal_vote_later_parent = {

    invariant global_view_instance.process_voted_normal(N,B1) & global_view_instance.process_voted_normal(N,B2) & block_t.round(B1,R1)  & block_t.round(B2,R2) & block_t.parent(B1,Bp1) & block_t.parent(B2,Bp2) & block_t.round(Bp1,Rp1) & block_t.round(Bp2,Rp2) & R1 < R2 -> Rp1 <= Rp2
}  with block_t, proposal_n_t, round_t, prepare_t, timeout_t, proposal_f_t, quorum_t, qc_t,  global_view_instance, gv_action_requires, gv_basic_validities, gv_basic_consequences

isolate gv_fallback_vote_implies_qoto = {
    relation process_voted_fallback_projection(N:process_index_t, B:block_t)
    definition process_voted_fallback_projection(N,B) = exists QN:quorum_t. global_view_instance.process_voted_fallback(N,B,QN)

    invariant global_view_instance.process_voted_fallback(N,B,Q) & block_t.round(B,Rb) & round_t.succ(Rp,Rb) -> (forall N:process_index_t. quorum_t.member(Q,N) -> exists QC:qc_t. global_view_instance.process_sent_timeout(N,Rp,QC))

    invariant global_view_instance.process_voted_fallback(N,B,Q) & block_t.round(B,Rb) & round_t.succ(Rp,Rb) -> gv_quorum_of_normal_votes.qoto(Rp)

    invariant [gv_inv_fallback_vote_implies_qoto] process_voted_fallback_projection(N,B) & block_t.round(B,Rb) & round_t.succ(Rp,Rb) -> gv_quorum_of_normal_votes.qoto(Rp)

    #attribute macro_finder=false

} with round_t, height_t, block_t, prepare_t, qc_t, tc_t, timeout_t, proposal_f_t, proposal_n_t, global_view_instance, gv_action_requires, gv_quorum_of_normal_votes 

isolate gv_quorum_of_fallback_votes = {
    # quorum of fallback votes
    relation qofv(B:block_t)
    definition qofv(B) = exists Q:quorum_t. forall N:process_index_t. is_good(N) & quorum_t.member(Q,N) -> gv_fallback_vote_implies_qoto.process_voted_fallback_projection(N,B)

    invariant qofv(B) & block_t.round(B,Rb) & round_t.succ(Rp,Rb) -> gv_quorum_of_normal_votes.qoto(Rp)

} with every_quorum_good, round_t, height_t, block_t, prepare_t, qc_t, tc_t, timeout_t, proposal_f_t, proposal_n_t, global_view_instance, gv_fallback_vote_implies_qoto.gv_inv_fallback_vote_implies_qoto#, gv_action_requires, gv_quorum_of_normal_votes 

isolate gv_round_safety_m1 = {

    property block_t.parent_exists(B) | ~ block_t.parent_exists(B)
    property block_t.round_exists(B) | ~ block_t.round_exists(B)

    invariant global_view_instance.process_voted_normal(N,Bn) & global_view_instance.process_voted_fallback(N,Bf,Q) -> Bn ~= Bf

    #invariant global_view_instance.process_voted_normal(N,Bn) & gv_fallback_vote_implies_qoto.process_voted_fallback_projection(N,Bf) -> Bn ~= Bf

    # invariant global_view_instance.process_voted(N,B) -> global_view_instance.process_voted_normal(N,B) | gv_fallback_vote_implies_qoto.process_voted_fallback_projection(N,B)

    # invariant global_view_instance.process_voted_normal(N1,B) -> ~ gv_fallback_vote_implies_qoto.process_voted_fallback_projection(N2,B)

    # invariant gv_fallback_vote_implies_qoto.process_voted_fallback_projection(N2,B) -> ~ global_view_instance.process_voted_normal(N1,B)

    relation normal_vote_exists(B:block_t)
    definition normal_vote_exists(B) = exists N:process_index_t. global_view_instance.process_voted_normal(N,B)
    invariant gv_quorum_of_normal_votes.qonv(B) -> normal_vote_exists(B)

    invariant [i1] normal_vote_exists(B) -> (forall N:process_index_t. is_good(N) -> ~ gv_fallback_vote_implies_qoto.process_voted_fallback_projection(N, B))


    #invariant normal_vote_exists(B) -> ~ gv_quorum_of_fallback_votes.qofv(B)
    # invariant gv_quorum_of_normal_votes.qonv(B) -> (forall N:process_index_t. ~ gv_fallback_vote_implies_qoto.process_voted_fallback_projection(N,B))

    # invariant qov(B) -> gv_quorum_of_normal_votes.qonv(B) | gv_quorum_of_fallback_votes.qofv(B)

    #attribute macro_finder=false
} with every_quorum_good, round_t, height_t, block_t, prepare_t, qc_t, tc_t, timeout_t, proposal_f_t, proposal_n_t, global_view_instance,  gv_basic_consequences.gv_inv_fallback_parent_lesser, gv_basic_consequences.gv_inv_normal_parent_pred, gv_fallback_vote_implies_qoto,gv_quorum_of_normal_votes#, gv_quorum_of_fallback_votes, gv_basic_validities.gv_inv_valid_received_n_prop

isolate gv_round_safety_m2 = {


    invariant [i2] (forall N:process_index_t. is_good(N) -> ~ gv_fallback_vote_implies_qoto.process_voted_fallback_projection(N, B)) -> ~ gv_quorum_of_fallback_votes.qofv(B)


    attribute macro_finder=false
} with every_quorum_good, round_t, height_t, block_t, prepare_t, qc_t, tc_t, timeout_t, proposal_f_t, proposal_n_t, global_view_instance, gv_fallback_vote_implies_qoto, gv_quorum_of_fallback_votes#, gv_basic_validities, gv_basic_consequences, gv_quorum_of_normal_votes,gv_round_safety_m1

isolate gv_round_safety_m3 = {


    invariant [i2] gv_round_safety_m1.normal_vote_exists(B) -> ~ gv_quorum_of_fallback_votes.qofv(B)

    #attribute macro_finder=false
} with every_quorum_good, round_t, height_t, block_t, prepare_t, qc_t, tc_t, timeout_t, proposal_f_t, proposal_n_t, global_view_instance, gv_quorum_of_fallback_votes, gv_fallback_vote_implies_qoto,gv_round_safety_m1,gv_round_safety_m2

isolate gv_round_safety_m4 = {

    #invariant gv_quorum_of_normal_votes.qonv(B) -> ~ gv_quorum_of_fallback_votes.qofv(B)

    #invariant global_view_instance.process_voted_normal(N1,B) -> ~ gv_fallback_vote_implies_qoto.process_voted_fallback_projection(N2,B) 

    #invariant qov(B) -> gv_quorum_of_normal_votes.qonv(B) | gv_quorum_of_fallback_votes.qofv(B)

    #invariant qov(B) & ~ gv_quorum_of_normal_votes.qonv(B) & ~ gv_quorum_of_fallback_votes.qofv(B) -> exists N1,N2:process_index_t. global_view_instance.process_voted_normal(N1,B) & gv_fallback_vote_implies_qoto.process_voted_fallback_projection(N2,B)

    relation qonv_q(B:block_t, Q:quorum_t)
    definition qonv_q(B,Q) = forall N:process_index_t. is_good(N) & quorum_t.member(Q,N) -> global_view_instance.process_voted_normal(N,B)

    invariant gv_quorum_of_normal_votes.qonv(B) -> exists Q:quorum_t. qonv_q(B:block_t, Q:quorum_t)

    relation qov_q(B:block_t, Q:quorum_t)
    definition qov_q(B,Q) = forall N:process_index_t. is_good(N) & quorum_t.member(Q,N) -> global_view_instance.process_voted(N,B)

    invariant global_view_instance.qov(B) -> exists Q:quorum_t. qov_q(B,Q)

    #invariant qov(B) & ~ gv_quorum_of_normal_votes.qonv(B) -> exists N2:process_index_t. gv_fallback_vote_implies_qoto.process_voted_fallback_projection(N2,B)

    #attribute macro_finder=false
} with every_quorum_good, round_t, height_t, block_t, prepare_t, qc_t, tc_t, timeout_t, proposal_f_t, proposal_n_t, global_view_instance, gv_basic_validities, gv_basic_consequences, gv_quorum_of_fallback_votes, gv_quorum_of_normal_votes, gv_fallback_vote_implies_qoto,gv_round_safety_m1,gv_round_safety_m3

isolate gv_round_safety_m5 = {

    relation qofv_q(B:block_t, Q:quorum_t)
    definition qofv_q(B,Q) = forall N:process_index_t. is_good(N) & quorum_t.member(Q,N) -> gv_fallback_vote_implies_qoto.process_voted_fallback_projection(N,B)

    invariant gv_quorum_of_fallback_votes.qofv(B) -> exists Q:quorum_t. qofv_q(B,Q)

} with every_quorum_good, round_t, height_t, block_t, prepare_t, qc_t, tc_t, timeout_t, proposal_f_t, proposal_n_t, global_view_instance, gv_basic_validities, gv_basic_consequences, gv_quorum_of_fallback_votes, gv_quorum_of_normal_votes, gv_fallback_vote_implies_qoto,gv_round_safety_m1,gv_round_safety_m3

isolate gv_round_safety_m6 = {

    property block_t.parent_exists(B) | ~ block_t.parent_exists(B)
    property block_t.round_exists(B) | ~ block_t.round_exists(B)

    invariant gv_round_safety_m4.qov_q(B,Q) & ~ gv_round_safety_m4.qonv_q(B,Q) -> exists N2:process_index_t. gv_fallback_vote_implies_qoto.process_voted_fallback_projection(N2,B)

    invariant gv_round_safety_m4.qov_q(B,Q) & ~ gv_round_safety_m5.qofv_q(B,Q) -> exists N:process_index_t. global_view_instance.process_voted_normal(N,B)

    invariant gv_round_safety_m4.qov_q(B,Q) & ~ gv_round_safety_m4.qonv_q(B,Q) & ~ gv_round_safety_m5.qofv_q(B,Q) -> exists N, N2:process_index_t. gv_fallback_vote_implies_qoto.process_voted_fallback_projection(N2,B) & global_view_instance.process_voted_normal(N,B)

    invariant gv_round_safety_m4.qov_q(B,Q) -> gv_round_safety_m4.qonv_q(B,Q) | gv_round_safety_m5.qofv_q(B,Q)

    #invariant global_view_instance.qov(B) -> gv_quorum_of_normal_votes.qonv(B) | gv_quorum_of_fallback_votes.qofv(B)

    #attribute macro_finder=false
} with every_quorum_good, round_t, height_t, block_t, prepare_t, qc_t, tc_t, timeout_t, proposal_f_t, proposal_n_t, global_view_instance, gv_basic_consequences.gv_inv_normal_parent_pred, gv_basic_consequences.gv_inv_fallback_parent_lesser, gv_quorum_of_fallback_votes, gv_quorum_of_normal_votes, gv_fallback_vote_implies_qoto,gv_round_safety_m4,gv_round_safety_m5

isolate gv_round_safety_m6a = {
    private{
        invariant global_view_instance.qov(B) -> exists Q:quorum_t. gv_round_safety_m4.qov_q(B,Q)

        invariant gv_round_safety_m4.qonv_q(B,Q) -> gv_quorum_of_normal_votes.qonv(B)

        invariant gv_round_safety_m5.qofv_q(B,Q) -> gv_quorum_of_fallback_votes.qofv(B)
    }

    invariant global_view_instance.qov(B) -> gv_quorum_of_normal_votes.qonv(B) | gv_quorum_of_fallback_votes.qofv(B)

    #attribute macro_finder=false
} with round_t, height_t, block_t, prepare_t, qc_t, tc_t, timeout_t, proposal_f_t, proposal_n_t, global_view_instance, gv_quorum_of_fallback_votes, gv_quorum_of_normal_votes,gv_round_safety_m4,gv_round_safety_m5, gv_round_safety_m6

isolate gv_round_safety_m8 = {
    invariant is_good(N) & global_view_instance.process_voted_normal(N,B1) & global_view_instance.process_voted_normal(N,B2) & block_t.round(B1,R) & block_t.round(B2,R) -> B1 = B2

    invariant is_good(N) & gv_fallback_vote_implies_qoto.process_voted_fallback_projection(N,B1) & gv_fallback_vote_implies_qoto.process_voted_fallback_projection(N,B2) & block_t.round(B1,R) & block_t.round(B2,R) -> B1 = B2

    #invariant gv_round_safety_m4.qonv_q(B1,Q1) & gv_round_safety_m4.qonv_q(B2,Q2) -> exists N:process_index_t. is_good(N) & quorum_t.member(Q1,N) & quorum_t.member(Q2,N)

    #invariant gv_round_safety_m4.qonv_q(B1,Q1) & gv_round_safety_m4.qonv_q(B2,Q2)  & block_t.round(B1,R) & block_t.round(B2,R) -> exists N:process_index_t. is_good(N) & global_view_instance.process_voted_normal(N,B1) & global_view_instance.process_voted_normal(N,B2)

    #attribute macro_finder=false
} with quorum_intersection_axiom, global_view_instance, gv_action_requires, gv_fallback_vote_implies_qoto, block_t, proposal_n_t, timeout_t, round_t, proposal_f_t, gv_round_safety_m4

isolate gv_round_safety_m8a = {

    invariant gv_round_safety_m4.qonv_q(B1,Q1) & gv_round_safety_m4.qonv_q(B2,Q2) -> exists N:process_index_t. is_good(N) & quorum_t.member(Q1,N) & quorum_t.member(Q2,N)

    invariant gv_round_safety_m4.qonv_q(B1,Q1) & gv_round_safety_m4.qonv_q(B2,Q2)  & block_t.round(B1,R) & block_t.round(B2,R) -> exists N:process_index_t. is_good(N) & global_view_instance.process_voted_normal(N,B1) & global_view_instance.process_voted_normal(N,B2)

    attribute macro_finder=false
} with quorum_intersection_axiom, global_view_instance, gv_action_requires, block_t, proposal_n_t, timeout_t, round_t, proposal_f_t, gv_round_safety_m4

isolate gv_round_safety_m9 = {

    invariant gv_quorum_of_normal_votes.qonv(B1) & gv_quorum_of_normal_votes.qonv(B2) & block_t.round(B1,R) & block_t.round(B2,R) -> B1 = B2
} with quorum_intersection_axiom, global_view_instance, gv_action_requires, gv_fallback_vote_implies_qoto, block_t, proposal_n_t, timeout_t, round_t, proposal_f_t, gv_round_safety_m4, gv_round_safety_m8, gv_round_safety_m8a

isolate gv_round_safety_m10 = {

    invariant gv_round_safety_m5.qofv_q(B1,Q1) & gv_round_safety_m5.qofv_q(B2,Q2) & block_t.round(B1,R) & block_t.round(B2,R) -> exists N:process_index_t. is_good(N) & quorum_t.member(Q1,N) & quorum_t.member(Q2,N)

    #attribute macro_finder=false
} with quorum_intersection_axiom, global_view_instance, block_t, proposal_n_t, timeout_t, round_t, proposal_f_t#, gv_round_safety_m5, gv_action_requires, gv_fallback_vote_implies_qoto

isolate gv_round_safety_m11 = {


    invariant gv_round_safety_m5.qofv_q(B1,Q1) & gv_round_safety_m5.qofv_q(B2,Q2) & block_t.round(B1,R) & block_t.round(B2,R) -> exists N:process_index_t. is_good(N) & gv_fallback_vote_implies_qoto.process_voted_fallback_projection(N,B1) & gv_fallback_vote_implies_qoto.process_voted_fallback_projection(N,B2)

    invariant gv_round_safety_m5.qofv_q(B1,Q1) & gv_round_safety_m5.qofv_q(B2,Q2) & block_t.round(B1,R) & block_t.round(B2,R) -> B1 = B2

    invariant gv_quorum_of_fallback_votes.qofv(B1) & gv_quorum_of_fallback_votes.qofv(B2) & block_t.round(B1,R) & block_t.round(B2,R) -> B1 = B2

    attribute macro_finder=false
} with global_view_instance, block_t, proposal_n_t, timeout_t, round_t, proposal_f_t, gv_round_safety_m5, gv_round_safety_m10, gv_fallback_vote_implies_qoto, gv_round_safety_m8, gv_quorum_of_fallback_votes#,gv_action_requires, gv_fallback_vote_implies_qoto

isolate gv_round_safety_m12 = {
    invariant gv_quorum_of_fallback_votes.qofv(B1) & block_t.round(B1,R) & block_t.round(B2,R) & 0 < R & round_t.succ(Rp,R) -> gv_quorum_of_fallback_votes.qofv(B1) & block_t.round(B1,R) & block_t.round(B2,R) & 0 < R & round_t.succ(Rp,R) & gv_quorum_of_normal_votes.qoto(Rp)

    invariant gv_quorum_of_fallback_votes.qofv(B1) & block_t.round(B1,R) & block_t.round(B2,R) & 0 < R & round_t.succ(Rp,R) & gv_quorum_of_normal_votes.qoto(Rp) -> ~ gv_quorum_of_normal_votes.qonv(B2)

    relation predicate1(B1:block_t, B2:block_t, R:round_t, Rp:round_t)
    definition predicate1(B1,B2,R,Rp) = gv_quorum_of_fallback_votes.qofv(B1) & block_t.round(B1,R) & block_t.round(B2,R) & 0 < R & round_t.succ(Rp,R)

    relation predicate2(B1:block_t, B2:block_t, R:round_t, Rp:round_t)
    definition predicate2(B1,B2,R,Rp) = gv_quorum_of_fallback_votes.qofv(B1) & block_t.round(B1,R) & block_t.round(B2,R) & 0 < R & round_t.succ(Rp,R) & gv_quorum_of_normal_votes.qoto(Rp)

    invariant predicate1(B1,B2,R,Rp) -> predicate2(B1,B2,R,Rp)

    invariant predicate2(B1,B2,R,Rp) ->  ~ gv_quorum_of_normal_votes.qonv(B2)

    invariant predicate1(B1,B2,R,Rp) -> ~ gv_quorum_of_normal_votes.qonv(B2)

    invariant gv_quorum_of_fallback_votes.qofv(B1) & block_t.round(B1,R) & block_t.round(B2,R) & 0 < R & round_t.succ(Rp,R) -> ~ gv_quorum_of_normal_votes.qonv(B2)
    attribute macro_finder=false
} with every_quorum_good, gv_quorum_of_normal_votes, gv_quorum_of_fallback_votes, global_view_instance, gv_fallback_vote_implies_qoto, block_t, round_t, proposal_n_t, timeout_t, round_t, proposal_f_t

isolate gv_round_safety_m13 = {

    private {
        invariant global_view_instance.qov(B1) & global_view_instance.qov(B2) & block_t.round(B1,R) & block_t.round(B2,R) & round_t.succ(Rp,R) -> (gv_quorum_of_normal_votes.qonv(B1) | gv_quorum_of_fallback_votes.qofv(B1)) & (gv_quorum_of_normal_votes.qonv(B2) | gv_quorum_of_fallback_votes.qofv(B2))

        invariant global_view_instance.qov(B1) & global_view_instance.qov(B2) & block_t.round(B1,R) & block_t.round(B2,R) & round_t.succ(Rp,R)  & gv_quorum_of_normal_votes.qonv(B1) & gv_quorum_of_normal_votes.qonv(B2) -> B1 = B2

        invariant global_view_instance.qov(B1) & global_view_instance.qov(B2) & block_t.round(B1,R) & block_t.round(B2,R) & round_t.succ(Rp,R)  & gv_quorum_of_fallback_votes.qofv(B1) & gv_quorum_of_fallback_votes.qofv(B2) -> B1 = B2

        invariant global_view_instance.qov(B1) & global_view_instance.qov(B2) & block_t.round(B1,R) & block_t.round(B2,R) & round_t.succ(Rp,R)  & gv_quorum_of_fallback_votes.qofv(B1) & 0 < R -> ~ gv_quorum_of_normal_votes.qonv(B2)

        invariant global_view_instance.qov(B1) & global_view_instance.qov(B2) & block_t.round(B1,R) & block_t.round(B2,R) & round_t.succ(Rp,R)  & gv_quorum_of_fallback_votes.qofv(B2) & 0 < R -> ~ gv_quorum_of_normal_votes.qonv(B1)

        invariant global_view_instance.qov(B1) & global_view_instance.qov(B2) & block_t.round(B1,R) & block_t.round(B2,R) & round_t.succ(Rp,R) & 0 = R -> B1 = B2
    }

    invariant global_view_instance.qov(B1) & global_view_instance.qov(B2) & block_t.round(B1,R) & block_t.round(B2,R) & round_t.succ(Rp,R) -> B1 = B2

    invariant global_view_instance.qov(B1) & global_view_instance.qov(B2) & block_t.round(B1,R) & block_t.round(B2,R) & 0 = R -> B1 = B2

    attribute macro_finder=false
} with global_view_instance, gv_quorum_of_normal_votes, gv_quorum_of_fallback_votes, gv_fallback_vote_implies_qoto, gv_round_safety_m4,gv_round_safety_m5, gv_round_safety_m6a,gv_round_safety_m9, gv_round_safety_m11, gv_round_safety_m12, block_t, round_t, proposal_n_t, timeout_t, round_t, proposal_f_t

isolate gv_round_safety = {

    relation predicate3(B1,B2,R) = exists Rp:round_t. global_view_instance.qov(B1) & global_view_instance.qov(B2) & block_t.round(B1,R) & block_t.round(B2,R) & round_t.succ(Rp,R)

    invariant predicate3(B1,B2,R) -> B1 = B2

    invariant global_view_instance.qov(B1) & global_view_instance.qov(B2) & block_t.round(B1,R) & block_t.round(B2,R) & 0 < R -> predicate3(B1,B2,R)

    invariant global_view_instance.qov(B1) & global_view_instance.qov(B2) & block_t.round(B1,R) & block_t.round(B2,R) & 0 < R -> B1 = B2

    invariant global_view_instance.qov(B1) & global_view_instance.qov(B2) & block_t.round(B1,R) & block_t.round(B2,R) -> B1 = B2

} with global_view_instance, block_t, round_t, proposal_n_t, timeout_t, round_t, proposal_f_t, gv_round_safety_m13, round_predecessor

isolate genesis_starts_the_chain = {
    #invariant block_t.parent_exists(B) | ~block_t.parent_exists(B)

    invariant is_good(N) & global_view_instance.process_committed(N, B) & block_t.height(B, 0) -> B = block_t.genesis
} with block_t, prepare_t, timeout_t, proposal_f_t, proposal_n_t, global_view_instance

isolate qonv_implies_parent_gl = {
    invariant is_good(N) & global_view_instance.process_voted_normal(N,B) & block_t.parent(B,Bp) -> gv_normal_vote_requires_gl_candidate.gl_candidate(N,Bp)

    relation global_lock_q(B:block_t, Q:quorum_t)
    definition global_lock_q(B,Q) = forall N:process_index_t. quorum_t.member(Q,N) & is_good(N) -> gv_normal_vote_requires_gl_candidate.gl_candidate(N,B)

    invariant gv_round_safety_m4.qonv_q(B,Q) & block_t.parent(B,Bp) -> global_lock_q(Bp,Q)

    relation global_lock(B:block_t)
    definition global_lock(B) = exists Q:quorum_t. forall N:process_index_t. quorum_t.member(Q,N) & is_good(N) -> gv_normal_vote_requires_gl_candidate.gl_candidate(N,B)

    invariant gv_quorum_of_normal_votes.qonv(B) & block_t.parent(B,Bp) -> global_lock(Bp)

} with block_t, prepare_t, timeout_t, proposal_f_t, proposal_n_t, global_view_instance, gv_action_requires, gv_normal_vote_requires_gl_candidate, gv_basic_validities.gv_inv_valid_received_n_prop, gv_round_safety_m4

isolate gv_gloabal_lock_cstd = {

    invariant qonv_implies_parent_gl.global_lock(Bp) -> block_t.cstd(Bp)
    
} with block_t, prepare_t, timeout_t, proposal_f_t, proposal_n_t, global_view_instance, qonv_implies_parent_gl, every_quorum_good, gv_normal_vote_requires_gl_candidate.gv_inv_gl_candidate_cstd

isolate gv_qc_implies_qov = {
    invariant global_view_instance.qc_valid(QC) & qc_t.block(QC,B) -> global_view_instance.qov(B)

    invariant global_view_instance.process_received_qc(N,B) -> global_view_instance.qov(B)
} with global_view_instance, gv_round_safety_m4, block_t, prepare_t, timeout_t, proposal_f_t, proposal_n_t, gv_action_requires

isolate qofv_implies_fallback_vote = {
        invariant gv_quorum_of_fallback_votes.qofv(Bc) -> exists N:process_index_t. gv_fallback_vote_implies_qoto.process_voted_fallback_projection(N,Bc)
} with every_quorum_good, block_t, round_t, prepare_t, timeout_t, proposal_f_t, proposal_n_t, global_view_instance, gv_quorum_of_fallback_votes, gv_fallback_vote_implies_qoto

isolate gv_ldc_implies_gl = {
    property global_view_instance.qov(B) | ~ global_view_instance.qov(B)
    property global_view_instance.qc_valid(QC) | ~ global_view_instance.qc_valid(QC)

    invariant global_view_instance.successive_blocks(Bp,Bc) & block_t.parent(Bc,Bp) -> (forall N:process_index_t. ~ gv_fallback_vote_implies_qoto.process_voted_fallback_projection(N,Bc))

    invariant global_view_instance.successive_blocks(Bp,Bc) & block_t.parent(Bc,Bp) -> (forall N:process_index_t. forall Q:quorum_t. ~ global_view_instance.process_voted_fallback(N,Bc, Q))

    invariant global_view_instance.successive_blocks(Bp,Bc) & block_t.parent(Bc,Bp) -> ~ gv_quorum_of_fallback_votes.qofv(Bc)

    invariant global_view_instance.ldc_pair(Bp,Bc) -> gv_quorum_of_normal_votes.qonv(Bc) 

    invariant global_view_instance.ldc_pair(Bp,Bc) -> qonv_implies_parent_gl.global_lock(Bp)

    invariant [gv_inv_ldc_implies_gl] global_view_instance.ldc(B) -> qonv_implies_parent_gl.global_lock(B)

    attribute macro_finder=false
} with every_quorum_good, gv_quorum_of_normal_votes, global_view_instance, gv_action_requires, block_t, round_t, prepare_t, timeout_t, proposal_f_t, proposal_n_t, gv_round_safety_m6a, gv_round_safety_m6, gv_fallback_vote_implies_qoto, gv_basic_consequences.gv_inv_fallback_parent_lesser, gv_qc_implies_qov, gv_round_safety_m4, qonv_implies_parent_gl, gv_quorum_of_fallback_votes, qofv_implies_fallback_vote

isolate gv_qov_after_gl_descendant = {
    invariant qonv_implies_parent_gl.global_lock(Bg) & global_view_instance.qov(Bl) & block_t.round(Bg, Rg) & block_t.round(Bl,Rl) & Rg < Rl -> block_t.ancestor(Bl,Bg)

    invariant qonv_implies_parent_gl.global_lock(Bg) & global_view_instance.qov(Bl) & block_t_conv.round_lt(Bg,Bl) -> block_t.ancestor(Bl,Bg)
} with global_view_instance, gv_round_safety_m4, block_t, round_t, prepare_t, timeout_t, proposal_f_t, proposal_n_t, block_t_conv

######local_view_instance
isolate local_view_instance = {
    property block_t.parent_exists(B) | ~ block_t.parent_exists(B)
    property global_view_instance.proposal_f_valid(P) & proposal_f_t.tc(P,TC) -> global_view_instance.tc_valid(TC)
    property block_t_conv.round_lte(B1,B2) | ~ block_t_conv.round_lte(B1,B2)
    instantiate supraBFT(global_view_instance)
    property local_view(Id).max_commitQ(B) | ~ local_view(Id).max_commitQ(B)
    property global_view_instance.tc_valid(TC) | ~ global_view_instance.tc_valid(TC)
    property global_view_instance.qc_valid(QC) | ~ global_view_instance.qc_valid(QC)
    property global_view_instance.proposal_f_valid(P) | ~ global_view_instance.proposal_f_valid(P)
    property local_view(Id).qcs_in_tc_processed(TC) | ~ local_view(Id).qcs_in_tc_processed(TC)

    #attribute macro_finder=false
} with global_view_instance, round_t, height_t, block_t, proposal_n_t, prepare_t, genesis_member, qc_t, timeout_t,proposal_f_t#, ancestor_transitive_closure_block, parent_same_implications, parent_same_implications_height, shim, lv_validity_invariants, lv_basic_invariants, lv_action_ensures, gv_basic_validities, gv_basic_consequences, types_block_t_ensures, types_proposal_n_t_ensures, types_prepare_t_ensures, types_timeout_t_ensures, types_proposal_f_t_ensures, types_block_t_requires, types_proposal_n_t_requires, types_prepare_t_requires, types_timeout_t_requires, types_proposal_f_t_requires, lv_action_requires, gv_action_requires, block_t_conv, gv_normal_vote_requires_gl_candidate

isolate lv_prop_f_getMaxQC_requires = {

    before local_view_instance.local_view.prop_f_getMaxQC(id:process_index_t, p:proposal_f_t) returns (qc:qc_t) {
        require global_view_instance.proposal_f_valid(p);
    }

    after local_view_instance.local_view.prop_f_getMaxQC(id:process_index_t, p:proposal_f_t) returns (qc:qc_t) {
        ensure proposal_f_t.tc(p,TC) & tc_t.timeout(TC,T) & timeout_t.qc(T,QC) & qc_t.block(QC,Bq) & block_t.round(Bq,Rq) & qc_t.block(qc,Br) & block_t.round(Br,Rr) -> Rq <= Rr;
    }
} with block_t, proposal_n_t, round_t, prepare_t, timeout_t, proposal_f_t, quorum_t, qc_t, local_view_instance, global_view_instance

isolate lv_verify_prop_f_getMaxQC_requires = local_view_instance with lv_prop_f_getMaxQC_requires,gv_before_vote_fallback_parent_maxtc, global_view_instance, round_t, height_t, block_t, proposal_n_t, prepare_t, genesis_member, qc_t, timeout_t,proposal_f_t,iso_valid_received_proposal_f.valid_received_proposal_f

isolate lv_before_tc_get_round = {

    before local_view_instance.local_view.tc_get_round(id:process_index_t, tc:tc_t) returns (r:round_t) {
        require global_view_instance.tc_valid(tc);#_#_#
    }

} with block_t, proposal_n_t, round_t, prepare_t, timeout_t, proposal_f_t, quorum_t, qc_t, local_view_instance, global_view_instance

isolate lv_tc_proposal_f_processing_requires = {
    before local_view_instance.local_view.tc_processing(id:process_index_t, tc:tc_t)
    {
        assume local_view_instance.local_view(id).qcs_in_tc_processed(tc);#_#
        assume local_view_instance.local_view(id).received_tc(tc);#_#
    }
} with block_t, proposal_n_t, round_t, prepare_t, timeout_t, proposal_f_t, quorum_t, qc_t, local_view_instance, global_view_instance

isolate lv_verify_tc_proposal_f_processing_requires = local_view_instance with lv_tc_proposal_f_processing_requires, lv_before_tc_get_round,lv_validity_invariants.valid_received_tc, global_view_instance, round_t, height_t, block_t, proposal_n_t, prepare_t, genesis_member, qc_t, timeout_t,proposal_f_t

isolate lv_verify_action_timeout_requires = local_view_instance with gv_action_timeout_requires, global_view_instance, gv_normal_vote_requires_gl_candidate, round_t, block_t, proposal_n_t, prepare_t, qc_t, timeout_t, proposal_f_t, lv_max_commitQ_not_empty.inv_commitQ_is_processed, lv_basic_invariants.inv_qc_for_block, lv_tc_proposal_f_processing_requires, lv_validity_invariants.valid_received_tc,iso_valid_received_proposal_f.valid_received_proposal_f,gv_basic_validities.gv_inv_genesis_qc_valid, lv_basic_invariants.inv_qc_for_block_genesis, lv_validity_invariants.inv_rc_gt_observed_qc, lv_validity_invariants.lv_rc_m1_pred_rc, lv_validity_invariants.inv_locked_is_observed, lv_validity_invariants.inv_locked_cpl_is_observed, lv_basic_invariants.lv_process_in_round_r_c, lv_basic_invariants.lv_inv_locked_local_global,lv_basic_invariants.lv_inv_first_locked_local_global, gv_normal_vote_requires_gl_candidate.gv_inv_gl_candidate_lte_locked_cpl, lv_basic_invariants.lv_inv_to_implies_exprd_round

isolate lv_verify_action_timeout_requires_case_split = local_view_instance with gv_action_timeout_requires_case_split, global_view_instance, gv_normal_vote_requires_gl_candidate, round_t, block_t, proposal_n_t, prepare_t, qc_t, timeout_t, proposal_f_t, lv_max_commitQ_not_empty.inv_commitQ_is_processed, lv_validity_invariants.lv_inv_received_tc_fplusone_valid, lv_validity_invariants.valid_received_tc, lv_tc_proposal_f_processing_requires, lv_validity_invariants.lv_r_c_gt_0#, lv_basic_invariants.inv_qc_for_block, lv_tc_proposal_f_processing_requires, lv_validity_invariants.valid_received_tc,iso_valid_received_proposal_f.valid_received_proposal_f,gv_basic_validities.gv_inv_genesis_qc_valid, lv_basic_invariants.inv_qc_for_block_genesis, lv_validity_invariants.inv_rc_gt_observed_qc, lv_validity_invariants.lv_rc_m1_pred_rc, lv_validity_invariants.inv_locked_is_observed, lv_validity_invariants.inv_locked_cpl_is_observed, lv_basic_invariants.lv_process_in_round_r_c, lv_basic_invariants.lv_inv_locked_local_global,lv_basic_invariants.lv_inv_first_locked_local_global, gv_normal_vote_requires_gl_candidate.gv_inv_gl_candidate_lte_locked_cpl, lv_basic_invariants.lv_inv_to_implies_exprd_round,

isolate lv_action_requires = {
    before local_view_instance.local_view.block_t_get_round(id:process_index_t,b:block_t) returns (r:round_t) {
        require block_t.cstd(b);#_#
    }

    before local_view_instance.local_view.proposal_f_get_tc(id:process_index_t, p:proposal_f_t) returns (tc:tc_t) {
        require global_view_instance.proposal_f_valid(p);#_#
    }

    before local_view_instance.local_view.timeout_get_qc(id:process_index_t, t:timeout_t) returns (qc:qc_t) {
        require global_view_instance.timeout_valid(t);#_#
    }

    before local_view_instance.local_view.qc_get_block(id:process_index_t, qc:qc_t) returns (b:block_t) {
        require global_view_instance.qc_valid(qc);#_#
    }

    before local_view_instance.local_view.proposeNormal(id:process_index_t, pB:block_t) {
        require block_t.round(pB,Rp) -> round_t.succ(Rp,local_view_instance.local_view(id).r_c);#_#
    }

    before local_view_instance.local_view.timeout(id:process_index_t, r:round_t, tc_fp1:tc_fplusone_t, tc:tc_t) {
        require round_t.succ(r,Rs) -> global_view_instance.process_in_round(id) <= Rs;#_#
        require r ~= 0;#_#
    }

    before local_view_instance.local_view.timer_expire(id:process_index_t) {
        require ~local_view_instance.local_view(id).timer;
        require round_t.succ(0,R1) -> R1 < local_view_instance.local_view(id).r_c;
    }

    # before local_view_instance.local_view.proposal_f_processing(id:process_index_t, p:proposal_f_t) {
    #     require ~local_view_instance.local_view(id).timer;

    #     require local_view_instance.local_view(id).received_proposal_f(p, leader(round_t.prev(local_view_instance.local_view(id).r_c)));

    #     require proposal_f_t.tc(p,TC) -> local_view_instance.local_view(id).received_tc(TC) & local_view_instance.local_view(id).qcs_in_tc_processed(TC);
    # }

    before local_view_instance.local_view.tc_getMaxQC(id:process_index_t, tc:tc_t) returns (qc:qc_t) {
        require global_view_instance.tc_valid(tc);#_#
    }

    before local_view_instance.local_view.tc_get_quorum(id:process_index_t, tc:tc_t) returns (q:quorum_t) {
        require global_view_instance.tc_valid(tc);#_#
    }

    before local_view_instance.local_view.qc_get_round(id:process_index_t, qc:qc_t) returns (r:round_t) {
        require global_view_instance.qc_valid(qc);#_#
    }

    before local_view_instance.local_view.tc_fplusone_get_round(id:process_index_t, tc:tc_fplusone_t) returns (r:round_t) {
        require global_view_instance.tc_fplusone_valid(tc);#_#
    }

} with shim, block_t, proposal_n_t, round_t, prepare_t, timeout_t, proposal_f_t, quorum_t, qc_t, local_view_instance, global_view_instance

isolate lv_action_ensures = {
    after local_view_instance.local_view.block_t_get_round(id:process_index_t,b:block_t) returns (r:round_t) {

        ensure block_t.round(b, r);

    }

    after local_view_instance.local_view.proposal_f_get_tc(id:process_index_t, p:proposal_f_t) returns (tc:tc_t) {
        ensure proposal_f_t.tc(p, tc);#_#   
    }

    after local_view_instance.local_view.timeout_get_qc(id:process_index_t, t:timeout_t) returns (qc:qc_t) {

        ensure timeout_t.qc(t, qc);#_#
    }

    after local_view_instance.local_view.qc_get_block(id:process_index_t, qc:qc_t) returns (b:block_t) {
        ensure qc_t.block(qc, b);#_#
    }

    after local_view_instance.local_view.tc_getMaxQC(id:process_index_t, tc:tc_t) returns (qc:qc_t) {
        ensure global_view_instance.qc_valid(qc);#_#
    }

    after local_view_instance.local_view.tc_get_round(id:process_index_t, tc:tc_t) returns (r:round_t) {
        ensure tc_t.round(tc, r);#_#
    }

    after local_view_instance.local_view.tc_get_quorum(id:process_index_t, tc:tc_t) returns (q:quorum_t) {
        ensure tc_t.quorum(tc,q);#_#
    }

    after local_view_instance.local_view.qc_get_round(id:process_index_t, qc:qc_t) returns (r:round_t) {
        ensure forall B:block_t. qc_t.block(qc,B) -> block_t.round(B, r);#_#
    }

    after local_view_instance.local_view.tc_fplusone_get_round(id:process_index_t, tc:tc_fplusone_t) returns (r:round_t) {
        ensure tc_fplusone_t.round(tc, r);#_#
    }
} with block_t, proposal_n_t, round_t, prepare_t, timeout_t, proposal_f_t, quorum_t, qc_t, local_view_instance, global_view_instance

isolate iso_valid_received_proposal_f = {

    invariant [valid_received_proposal_f] local_view_instance.local_view.received_proposal_f(Id, P, N) -> global_view_instance.proposal_f_valid(P)
    invariant forall M:msg. shim.sent(M,D) & M.kind = msg_kind.proposal_f -> global_view_instance.proposal_f_valid(M.prop_f)

    attribute macro_finder=false

} with shim, block_t, proposal_n_t, round_t, prepare_t, timeout_t, proposal_f_t, quorum_t, qc_t, global_view_instance, local_view_instance, lv_action_requires, lv_basic_invariants#, lv_action_ensures, types_block_t_ensures, types_proposal_n_t_ensures, types_timeout_t_ensures, types_proposal_f_t_ensures

isolate lv_validity_invariants = {

    invariant [lv_r_c_gt_0] local_view_instance.local_view(Id).r_c > 0
    invariant [lv_rc_m1_pred_rc] round_t.succ(local_view_instance.local_view(Id).r_c_m1, local_view_instance.local_view(Id).r_c)

    invariant [lv_inv_received_proposal_n_valid] local_view_instance.local_view.received_proposal_n(Id, P, N) -> global_view_instance.proposal_n_valid(P)
    invariant forall M:msg. shim.sent(M,D) & M.kind = msg_kind.proposal_n -> global_view_instance.proposal_n_valid(M.prop_n)

    invariant local_view_instance.local_view.received_timeout(Id, T, N) -> global_view_instance.timeout_valid(T)
    invariant forall M:msg. shim.sent(M,D) & M.kind = msg_kind.timeout -> global_view_instance.timeout_valid(M.t)

    invariant [valid_received_tc] local_view_instance.local_view.received_tc(Id, TC) -> global_view_instance.tc_valid(TC)
    invariant forall M:msg. shim.sent(M,D) & M.kind = msg_kind.tc -> global_view_instance.tc_valid(M.tc)

    invariant [lv_inv_received_tc_fplusone_valid] local_view_instance.local_view.received_tc_fplusone(Id, TC) -> global_view_instance.tc_fplusone_valid(TC)
    invariant forall M:msg. shim.sent(M,D) & M.kind = msg_kind.tcfpo -> global_view_instance.tc_fplusone_valid(M.tc_po)

    invariant local_view_instance.local_view.received_prepare(Id, P, N) -> prepare_t.cstd(P)
    invariant forall M:msg. shim.sent(M,D) & M.kind = msg_kind.prepare -> prepare_t.cstd(M.prep)

    invariant [lv_valid_received_qc] local_view_instance.local_view.received_qc(Id, QC) -> global_view_instance.qc_valid(QC)
    invariant forall M:msg. shim.sent(M,D) & M.kind = msg_kind.qc -> global_view_instance.qc_valid(M.qc)

    invariant global_view_instance.qc_valid(local_view_instance.local_view(Id).locked)

    invariant [inv_locked_is_observed] qc_t.block(local_view_instance.local_view(Id).locked,B) -> local_view_instance.local_view(Id).observed_qc(B)

    invariant [inv_locked_cpl_is_observed] qc_t.block(local_view_instance.local_view(Id).locked,B) -> local_view_instance.local_view(Id).observed_qc(B)

    invariant [inv_rc_gt_observed_qc] local_view_instance.local_view(Id).observed_qc(B) & B ~= block_t.genesis & block_t.round(B,R) -> R < local_view_instance.local_view(Id).r_c_m1

    invariant [lv_inv_qc_processed_genesis] local_view_instance.local_view(Id).observed_qc(block_t.genesis)

    #attribute macro_finder=false

} with shim, block_t, proposal_n_t, round_t, prepare_t, timeout_t, proposal_f_t, quorum_t, qc_t, global_view_instance, local_view_instance, lv_action_requires, lv_action_ensures, types_block_t_ensures, types_proposal_n_t_ensures, types_timeout_t_ensures, types_proposal_f_t_ensures

isolate lv_max_commitQ_not_empty = {

    property block_t.parent_exists(B) | ~ block_t.parent_exists(B)
    property block_t.round_exists(B) | ~ block_t.round_exists(B)
    property block_t_conv.round_lte(B1,B2) | ~ block_t_conv.round_lte(B1,B2)
    property local_view_instance.local_view(Id).max_commitQ(B) | ~ local_view_instance.local_view(Id).max_commitQ(B)
    property local_view_instance.local_view(Id).commitQUgenesis(B) | ~ local_view_instance.local_view(Id).commitQUgenesis(B)

    invariant [inv_commitQ_is_processed] local_view_instance.local_view(Id).commitQ(B) -> local_view_instance.local_view(Id).observed_qc(B)

    invariant local_view_instance.local_view(Id).commitQUgenesis(B) -> block_t.cstd(B)

    # invariant exists B:block_t. local_view_instance.local_view(Id).commitQUgenesis(B)

    # invariant exists B:block_t. local_view_instance.local_view(Id).max_commitQ(B)

    #attribute macro_finder=false
} with shim, block_t, proposal_n_t, round_t, prepare_t, timeout_t, proposal_f_t, quorum_t, qc_t, local_view_instance, global_view_instance, lv_validity_invariants, block_t_conv

isolate lv_basic_invariants = {

    property block_t.parent_exists(B) | ~ block_t.parent_exists(B)
    property block_t.round_exists(B) | ~ block_t.round_exists(B)
    property block_t_conv.round_lte(B1,B2) | ~ block_t_conv.round_lte(B1,B2)
    property local_view_instance.local_view(Id).max_commitQ(B) | ~ local_view_instance.local_view(Id).max_commitQ(B)
    property local_view_instance.local_view(Id).commitQUgenesis(B) | ~ local_view_instance.local_view(Id).commitQUgenesis(B)
  
    #invariant block_t.parent_exists(B) | ~block_t.parent_exists(B)
    #invariant ancestor_transitive_closure_block.inbetween(B1, B2) | ~ancestor_transitive_closure_block.inbetween(B1, B2)
    invariant round_t.succ(R1,R2) | ~ round_t.succ(R1,R2)

    invariant is_good(Id) & global_view_instance.process_voted_normal(Id,B) & block_t.round(B,R) -> R <= local_view_instance.local_view(Id).r_vn
    invariant [lv_process_in_round_r_c] global_view_instance.process_in_round(Id) = local_view_instance.local_view(Id).r_c

    invariant forall R:round_t. local_view_instance.local_view(Id).expired_rounds(R) -> exists QC:qc_t. global_view_instance.process_sent_timeout(Id,R,QC)

    invariant [lv_inv_to_implies_exprd_round] forall R,Rp:round_t. forall QC:qc_t. is_good(Id) & global_view_instance.process_sent_timeout(Id,R,QC) & round_t.succ(Rp,local_view_instance.local_view(Id).r_c) & Rp <= R -> local_view_instance.local_view(Id).expired_rounds(R)

    #invariant local_view_instance.local_view(Id).timer & round_t.succ(Rp,local_view_instance.local_view(Id).r_c) -> exists QC:qc_t. global_view_instance.process_sent_timeout(Id,Rp,QC)

    invariant [lv_observed_qc_in_gv] local_view_instance.local_view(Id).observed_qc(B) -> global_view_instance.process_received_qc(Id,B) & block_t.cstd(B)

    invariant [lv_inv_locked_local_global] qc_t.block(local_view_instance.local_view(Id).locked,global_view_instance.process_locked_completely(Id))

    invariant [lv_inv_first_locked_local_global] qc_t.block(local_view_instance.local_view(Id).locked,global_view_instance.process_locked(Id))

    invariant local_view_instance.local_view(Id).locked ~= qc_t.genesis & qc_t.block(local_view_instance.local_view(Id).locked,B) & block_t.round(B,R) & round_t.succ(Rp,local_view_instance.local_view(Id).r_c) -> R < Rp

    invariant [inv_qc_for_block] local_view_instance.local_view(Id).observed_qc(B) -> global_view_instance.qc_valid(local_view_instance.local_view(Id).qc_for_block(B)) & qc_t.block(local_view_instance.local_view(Id).qc_for_block(B),B)

    invariant [inv_qc_for_block_genesis] local_view_instance.local_view(Id).qc_for_block(block_t.genesis) = qc_t.genesis

    attribute macro_finder=false

} with shim, block_t, proposal_n_t, round_t, prepare_t, timeout_t, proposal_f_t, quorum_t, qc_t, local_view_instance, global_view_instance, lv_action_ensures, lv_action_requires, lv_validity_invariants, gv_basic_validities.gv_voted_n_block_cstd, types_block_t_ensures, types_proposal_n_t_ensures, types_timeout_t_ensures, types_proposal_f_t_ensures, block_t_conv, lv_max_commitQ_not_empty

isolate lv_fallback_vote_r_vf = {
    invariant is_good(Id) & global_view_instance.process_voted_fallback(Id,B,Q) & block_t.round(B,R) -> R <= local_view_instance.local_view(Id).r_vf

    attribute macro_finder=false

} with block_t, proposal_n_t, round_t, prepare_t, timeout_t, proposal_f_t, quorum_t, qc_t, local_view_instance, global_view_instance, lv_action_ensures, lv_action_requires, lv_validity_invariants, gv_basic_validities.gv_voted_f_block_cstd, types_block_t_ensures, types_proposal_n_t_ensures, types_timeout_t_ensures, types_proposal_f_t_ensures

isolate lv_ldc_simulates_gv_ldc_m1 = {

    private {
        invariant local_view_instance.local_view(Id).observed_qc(B) -> global_view_instance.qov(B)

        invariant local_view_instance.local_view(Id).commitQ(B) -> global_view_instance.qov(B)
    }

    invariant local_view_instance.local_view(Id).ldc_pair(Bp, Bc) -> global_view_instance.ldc_pair(Bp,Bc)
} with block_t, proposal_n_t, round_t, prepare_t, timeout_t, proposal_f_t, local_view_instance, global_view_instance, lv_basic_invariants.inv_qc_for_block, gv_qc_implies_qov, lv_max_commitQ_not_empty.inv_commitQ_is_processed, lv_basic_invariants.lv_observed_qc_in_gv, lv_commit_invariants.lv_inv_last_committed_local_global#, lv_action_ensures, lv_action_requires, lv_basic_invariants.lv_observed_qc_in_gv

isolate lv_ldc_simulates_gv_ldc_m2 = {

    invariant local_view_instance.local_view(Id).commitQ(B) -> global_view_instance.process_received_qc(Id,B)

    invariant global_view_instance.process_received_qc(Id,local_view_instance.local_view(Id).last_committed)

    invariant block_t.ancestor(local_view_instance.local_view(Id).last_committed,B) -> global_view_instance.process_received_qc(Id,B)

    #attribute macro_finder=false
} with block_t, proposal_n_t, round_t, prepare_t, timeout_t, proposal_f_t, local_view_instance, global_view_instance, lv_basic_invariants.inv_qc_for_block, lv_max_commitQ_not_empty.inv_commitQ_is_processed, lv_basic_invariants.lv_observed_qc_in_gv, lv_commit_invariants.lv_inv_last_committed_local_global, gv_basic_validities.gv_inv_last_committed_ancestor_is_committed, gv_basic_validities.gv_inv_committed_is_qc,lv_ldc_simulates_gv_ldc_m1

isolate lv_ldc_simulates_gv_ldc = {
    
    invariant [lv_inv_ldc_local_global] local_view_instance.local_view(Id).ldc(B) -> global_view_instance.ldc(B)

    invariant local_view_instance.local_view(Id).eligible_to_commit(B) -> global_view_instance.eligible_to_commit(Id,B)

    invariant local_view_instance.local_view(Id).eligible_to_commit(B) & block_t.ancestor(B,Ba) -> global_view_instance.process_received_qc(Id,Ba)

    #attribute macro_finder=false
} with block_t, proposal_n_t, round_t, prepare_t, timeout_t, proposal_f_t, local_view_instance, global_view_instance, lv_basic_invariants.inv_qc_for_block, lv_max_commitQ_not_empty.inv_commitQ_is_processed, lv_basic_invariants.lv_observed_qc_in_gv, lv_commit_invariants.lv_inv_last_committed_local_global, gv_basic_validities.gv_inv_last_committed_ancestor_is_committed, gv_basic_validities.gv_inv_committed_is_qc,lv_ldc_simulates_gv_ldc_m1, lv_ldc_simulates_gv_ldc_m2#, lv_action_ensures, lv_action_requires, lv_basic_invariants.lv_observed_qc_in_gv

isolate lv_commit_invariants = {
    property global_view_instance.successive_blocks(Bc,Bp) | ~ global_view_instance.successive_blocks(Bc,Bp)

    invariant [lv_inv_last_committed_local_global] local_view_instance.local_view(Id).last_committed = global_view_instance.process_last_committed(Id)

    invariant ~local_view_instance.local_view(Id).commitQ(local_view_instance.local_view(Id).last_committed)

    #invariant global_view_instance.process_committed(Id,B) -> local_view_instance.local_view(Id).observed_qc(B) & ~ local_view_instance.local_view(Id).commitQ(B)

    invariant global_view_instance.process_committed(Id,local_view_instance.local_view(Id).last_committed)

    invariant local_view_instance.local_view(Id).last_committed = block_t.genesis & global_view_instance.process_committed(Id,B) -> B = block_t.genesis

    invariant local_view_instance.local_view(Id).observed_qc(local_view_instance.local_view(Id).last_committed)

    invariant block_t.ancestor(local_view_instance.local_view(Id).last_committed,B) -> global_view_instance.process_received_qc(Id,B)

    #invariant global_view_instance.process_committed(Id,B) & block_t.round(B,Rb) & block_t.round(local_view_instance.local_view(Id).last_committed,Rl) -> Rb <= Rl

    #invariant global_view_instance.process_committed(Id,B) & block_t.height(B,Hb) & block_t.height(local_view_instance.local_view(Id).last_committed,Hl) -> Hb <= Hl

    #attribute macro_finder=false
} with block_t, proposal_n_t, round_t, prepare_t, timeout_t, proposal_f_t, local_view_instance, global_view_instance, lv_action_ensures, lv_action_requires, lv_basic_invariants.lv_observed_qc_in_gv, gv_qc_implies_qov, lv_ldc_simulates_gv_ldc

isolate lv_verify_gv_action_commit_requires = local_view_instance with gv_action_commit_requires, global_view_instance,lv_commit_invariants, round_t, height_t, block_t, proposal_n_t, prepare_t, genesis_member, qc_t, timeout_t,proposal_f_t, ancestor_transitive_closure_block, parent_same_implications, lv_basic_invariants.lv_observed_qc_in_gv, lv_validity_invariants.lv_valid_received_qc

isolate lv_last_committed_ldc = {
    property local_view_instance.local_view(Id).commit_candidate(B) -> local_view_instance.local_view(Id).ldc(B)

    invariant local_view_instance.local_view(Id).last_committed = block_t.genesis | local_view_instance.local_view(Id).ldc(local_view_instance.local_view(Id).last_committed)

    #attribute macro_finder=false
} with local_view_instance, global_view_instance, block_t, proposal_n_t, prepare_t, genesis_member, qc_t, timeout_t,proposal_f_t, ancestor_transitive_closure_block, parent_same_implications

isolate lv_observed_qc_has_qov = {

    invariant local_view_instance.local_view(Id).observed_qc(B) -> global_view_instance.qov(B)
} with  local_view_instance, global_view_instance, block_t, proposal_n_t, prepare_t, genesis_member, qc_t, timeout_t,proposal_f_t, lv_basic_invariants.inv_qc_for_block, gv_qc_implies_qov

isolate lv_max_commitQ_unique = {
    invariant local_view_instance.local_view(Id).max_commitQ(B1) & local_view_instance.local_view(Id).max_commitQ(B2) & block_t.round(B1,R1) & block_t.round(B2,R2) -> block_t_conv.round_lte(B1,B2) & block_t_conv.round_lte(B2,B1) & R1 = R2

    attribute macro_finder=false
} with local_view_instance, global_view_instance, block_t, proposal_n_t, prepare_t, genesis_member, qc_t, timeout_t,proposal_f_t, block_t_conv

isolate lv_max_commitQ_retained_after_commit = {

    property global_view_instance.successive_blocks(B1,B2) | ~ global_view_instance.successive_blocks(B1,B2)
    property block_t.round_exists(B) | ~ block_t.round_exists(B)

    function max_commitQ_block(Id:process_index_t) : block_t

    relation monitor_observed_qc(Id:process_index_t, B:block_t)
    relation monitor_ldc(Bp:block_t)

    after init {
        max_commitQ_block(Id) := block_t.genesis
    }

    invariant local_view_instance.local_view(Id).commitQUgenesis(B) -> block_t_conv.round_lte(B,max_commitQ_block(Id))

    invariant local_view_instance.local_view(Id).observed_qc(B) -> block_t_conv.round_lte(B,max_commitQ_block(Id))

    invariant max_commitQ_block(Id) ~= block_t.genesis -> local_view_instance.local_view(Id).commitQ(max_commitQ_block(Id))

    invariant local_view_instance.local_view(Id).max_commitQ(max_commitQ_block(Id)) & local_view_instance.local_view(Id).max_observed_qc( max_commitQ_block(Id))

    before local_view_instance.local_view.qc_processing(id:process_index_t, qc:qc_t, b_qc:block_t) {
        require local_view_instance.local_view(id).received_qc(qc);
        require qc_t.block(qc,b_qc);

        if block_t_conv.round_lt(max_commitQ_block(id), b_qc) {
            max_commitQ_block(id) := b_qc;
        }

        monitor_observed_qc(id,B) := local_view_instance.local_view(id).observed_qc(B) | B = b_qc;
        monitor_ldc(Bp) := global_view_instance.ldc(Bp);
    }

    before local_view_instance.local_view.tryCommit(id:process_index_t, b_qc:block_t)
    {
        assume monitor_ldc(Bp) & global_view_instance.qov(Bl) & block_t_conv.round_lt(Bp,Bl) -> block_t.ancestor(Bl,Bp);
        assume monitor_observed_qc(id,B) = local_view_instance.local_view(id).observed_qc(B);
        assume local_view_instance.local_view(id).ldc(Bp) -> monitor_ldc(Bp);
        assume local_view_instance.local_view(id).commitQ(B) -> block_t_conv.round_lte(B,max_commitQ_block(id));
        assume local_view_instance.local_view(id).ldc_pair(Bp,Bc) -> block_t_conv.round_lte(Bc,max_commitQ_block(id));
        assume local_view_instance.local_view(id).ldc_pair(Bp,Bc) -> block_t_conv.round_lt(Bp,Bc) & block_t_conv.round_lte(Bc,max_commitQ_block(id));
        assume local_view_instance.local_view(id).ldc(Bp) -> block_t_conv.round_lt(Bp,max_commitQ_block(id));
        assume local_view_instance.local_view(id).commit_candidate(Bp) -> block_t_conv.round_lt(Bp,max_commitQ_block(id));
        assume local_view_instance.local_view(id).commit_candidate(Bp) -> local_view_instance.local_view(id).ldc(Bp);
        require local_view_instance.local_view(id).commit_candidate(Bp) -> monitor_ldc(Bp);
        require local_view_instance.local_view(id).commitQ(max_commitQ_block(id));
        require global_view_instance.qov(max_commitQ_block(id));
        require local_view_instance.local_view(id).commit_candidate(Bp) -> block_t.ancestor(max_commitQ_block(id),Bp);
    }

    after local_view_instance.local_view.tryCommit(id:process_index_t, b_qc:block_t)
    {
        ensure local_view_instance.local_view(id).commitQ(max_commitQ_block(id));
    }

    after local_view_instance.local_view.qc_processing(id:process_index_t, qc:qc_t, b_qc:block_t) {
        ensure local_view_instance.local_view(id).commitQ(max_commitQ_block(id));
    }

    attribute macro_finder=false
} with local_view_instance, global_view_instance, block_t, round_t, proposal_n_t, prepare_t, genesis_member, qc_t, timeout_t,proposal_f_t, lv_validity_invariants.lv_valid_received_qc, lv_basic_invariants.lv_observed_qc_in_gv, lv_observed_qc_has_qov, lv_max_commitQ_not_empty.inv_commitQ_is_processed, round_predecessor, block_t_conv, gv_qov_after_gl_descendant, qonv_implies_parent_gl, gv_normal_vote_requires_gl_candidate

isolate lv_verify_max_commitQ_retained_after_commit = local_view_instance with lv_max_commitQ_retained_after_commit, global_view_instance, block_t, round_t, proposal_n_t, prepare_t, genesis_member, qc_t, timeout_t,proposal_f_t, lv_validity_invariants.lv_valid_received_qc, lv_basic_invariants.lv_observed_qc_in_gv, lv_observed_qc_has_qov, lv_max_commitQ_not_empty.inv_commitQ_is_processed, round_predecessor, block_t_conv, gv_qov_after_gl_descendant, qonv_implies_parent_gl, gv_normal_vote_requires_gl_candidate

isolate gv_before_to_latest_qc = {
    before global_view_instance.timeout(n:process_index_t, r:round_t, maxCommitQC:qc_t, tc_fp1:tc_fplusone_t, tc:tc_t) {
        require ~is_good(n) | forall B_maxCommitQC,B_qc:block_t. global_view_instance.process_received_qc(n,B_qc) & qc_t.block(maxCommitQC,B_maxCommitQC) -> block_t_conv.round_lte(B_qc,B_maxCommitQC);

        require ~is_good(n) | round_t.succ(r,global_view_instance.process_in_round(n)) | (global_view_instance.process_received_tc_fplusone(n,tc_fp1) & tc_fplusone_t.round(tc_fp1,r)) | (global_view_instance.process_received_tc(n,tc) & tc_t.round(tc,r))
    }
} with global_view_instance, block_t, round_t, proposal_n_t, prepare_t, genesis_member, qc_t, timeout_t,proposal_f_t

isolate lv_verify_before_to_latest_qc = local_view_instance with gv_before_to_latest_qc, global_view_instance, block_t, round_t, proposal_n_t, prepare_t, genesis_member, qc_t, timeout_t,proposal_f_t

isolate gv_to_implies_no_gl_candidate = {

    invariant gv_normal_vote_requires_gl_candidate.gl_candidate(N,B) -> block_t.cstd(B)

    invariant gv_normal_vote_requires_gl_candidate.gl_candidate(N,B) & B ~= block_t.genesis -> block_t_conv.block_lt_predecessor(B,global_view_instance.process_in_round(N))

    invariant global_view_instance.process_sent_timeout(N,R,QC) & block_t.round(B,R) & is_good(N) -> ~gv_normal_vote_requires_gl_candidate.gl_candidate(N,B)

    attribute macro_finder=false
} with global_view_instance,gv_action_requires, block_t, round_t, proposal_n_t, prepare_t, genesis_member, qc_t, timeout_t,proposal_f_t, gv_normal_vote_requires_gl_candidate, gv_basic_consequences.gv_inv_locked_lt_pred_rc, gv_basic_consequences.gv_lock_no_to, gv_basic_consequences.gv_first_lock_no_to, gv_basic_validities.gv_inv_received_tc_valid, gv_basic_validities.gv_inv_cur_round_0, gv_basic_validities.gv_inv_locked_cpl_is_cstd, block_t_conv, round_predecessor

isolate gv_tc_implies_no_gl = {

    private {
        invariant global_view_instance.process_received_tc(N,TC) & tc_t.round(TC,R) -> gv_quorum_of_normal_votes.qoto(R)

        invariant qonv_implies_parent_gl.global_lock(B) & global_view_instance.process_received_tc(N,TC) & tc_t.round(TC,R) & block_t.round(B,R) -> exists N1:process_index_t. exists QC. is_good(N1) & global_view_instance.process_sent_timeout(N1,R,QC) & gv_normal_vote_requires_gl_candidate.gl_candidate(N1,B)

        invariant qonv_implies_parent_gl.global_lock(B) & global_view_instance.process_received_tc(N,TC) & tc_t.round(TC,R) & block_t.round(B,R) -> exists N1:process_index_t. exists QC. is_good(N1) & global_view_instance.process_sent_timeout(N1,R,QC) & gv_normal_vote_requires_gl_candidate.gl_candidate(N1,B)
    }

    invariant  qonv_implies_parent_gl.global_lock(B) & block_t.round(B, R) -> (forall TC:tc_t. forall N:process_index_t. tc_t.round(TC,R) -> ~ global_view_instance.process_received_tc(N,TC))

    #attribute macro_finder=false
} with global_view_instance, block_t, round_t, proposal_n_t, prepare_t, genesis_member, qc_t, timeout_t,proposal_f_t, gv_to_implies_no_gl_candidate, gv_basic_validities.gv_inv_received_tc_valid, gv_action_requires, gv_quorum_of_normal_votes, every_quorum_good, qonv_implies_parent_gl, gv_to_implies_no_gl_candidate, quorum_intersection_axiom, tc_t_conv

isolate gv_tc_implies_no_gl_p1 = {

    invariant  forall N:process_index_t. ~ exists TC:tc_t. (qonv_implies_parent_gl.global_lock(B) & tc_t.round(TC,R) & block_t.round(B, R) & global_view_instance.process_received_tc(N,TC))

    invariant  forall N:process_index_t. ~ (exists R:round_t. exists TC:tc_t. (qonv_implies_parent_gl.global_lock(B) & tc_t.round(TC,R) & block_t.round(B, R) & global_view_instance.process_received_tc(N,TC)))

    attribute macro_finder=false

} with global_view_instance, block_t, round_t, proposal_n_t, prepare_t, genesis_member, qc_t, timeout_t,proposal_f_t, gv_tc_implies_no_gl, round_predecessor, block_t_conv, tc_t_conv#, gv_to_implies_no_gl_candidate, gv_basic_validities.gv_inv_received_tc_valid, gv_action_requires, gv_quorum_of_normal_votes, every_quorum_good, qonv_implies_parent_gl, quorum_intersection_axiom

isolate gv_to_has_qc_gte_gl_m1 = {
    property block_t.round_exists(B) | ~ block_t.round_exists(B)
    property block_t.parent_exists(B) | ~ block_t.parent_exists(B)

    relation round_advance_link_to_qc(N:process_index_t, R:round_t, B:block_t)
    relation round_advance_link_to_tc(N:process_index_t, R:round_t, TC:tc_t)

    after init {
        round_advance_link_to_qc(N,R,B) := false;
        round_advance_link_to_tc(N,R,TC) := false;
    }

    after global_view_instance.enter_round(n:process_index_t,r:round_t,b:block_t,tc:tc_t, qc_observed:bool) {
        if qc_observed {
            round_advance_link_to_qc(n,r,b) := true;
        }
        else {
            round_advance_link_to_tc(n,r,tc) := true;
        }
    }

    invariant global_view_instance.process_in_round(N) = R & ~ round_t.succ(0,R) -> (exists B:block_t. round_advance_link_to_qc(N,R,B)) | (exists TC:tc_t. round_advance_link_to_tc(N,R,TC))

    #attribute macro_finder=false
} with global_view_instance, block_t, round_t, proposal_n_t, prepare_t, genesis_member, qc_t, timeout_t,proposal_f_t, block_t_conv, gv_basic_validities.gv_inv_received_qc_cstd#, gv_action_requires

# with global_view_instance, gv_tc_implies_no_gl, block_t, round_t, proposal_n_t, prepare_t, genesis_member, qc_t, timeout_t,proposal_f_t, gv_before_to_latest_qc, every_quorum_good, every_quorum_fplusone_good, ancestor_transitive_closure_block, block_t_conv, gv_basic_validities.gv_inv_received_qc_cstd#, gv_action_requires

isolate gv_to_has_qc_gte_gl_m2 = {

    invariant gv_to_has_qc_gte_gl_m1.round_advance_link_to_qc(N,R,B) -> global_view_instance.process_received_qc(N,B) & block_t_conv.block_pred_pred(B,R)

    invariant gv_to_has_qc_gte_gl_m1.round_advance_link_to_tc(N,R,TC) -> global_view_instance.process_received_tc(N,TC) & tc_t_conv.tc_pred_pred(TC,R)

    invariant global_view_instance.process_in_round(N) = R & ~ round_t.succ(0,R)-> (exists B:block_t. global_view_instance.process_received_qc(N,B) & block_t_conv.block_pred_pred(B,R)) | (exists TC:tc_t. global_view_instance.process_received_tc(N,TC) & tc_t_conv.tc_pred_pred(TC,R))

    attribute macro_finder=false
} with global_view_instance, block_t, round_t, proposal_n_t, prepare_t, genesis_member, qc_t, timeout_t,proposal_f_t, block_t_conv, gv_basic_validities.gv_inv_received_qc_cstd, gv_action_requires, gv_to_has_qc_gte_gl_m1

isolate gv_to_has_qc_gte_gl_m3 = {

    # invariant global_view_instance.process_in_round(N) = R & 0 < R & ~ round_t.succ(0,R) & qonv_implies_parent_gl.global_lock(B) & block_t_conv.block_pred_pred(B,R) -> (exists B:block_t. global_view_instance.process_received_qc(N,B) & block_t_conv.block_pred_pred(B,R)) | (exists TC:tc_t. qonv_implies_parent_gl.global_lock(B) & tc_t_conv.tc_pred_pred(TC,R) & block_t_conv.block_pred_pred(B,R) & global_view_instance.process_received_tc(N,TC))

    private {

        invariant block_t_conv.block_pred_pred(B,R) & tc_t_conv.tc_pred_pred(TC,R) & block_t.cstd(B) & global_view_instance.tc_valid(TC) -> tc_t_conv.tc_block_same_round(TC,B)

        # invariant (exists TC:tc_t. qonv_implies_parent_gl.global_lock(B) & tc_t_conv.tc_pred_pred(TC,R) & block_t_conv.block_pred_pred(B,R) & global_view_instance.process_received_tc(N,TC)) -> (exists TC:tc_t. qonv_implies_parent_gl.global_lock(B) & tc_t_conv.tc_block_same_round(TC,B) & global_view_instance.process_received_tc(N,TC))

        invariant (exists TC:tc_t. qonv_implies_parent_gl.global_lock(B) & tc_t_conv.tc_block_same_round(TC,B) & global_view_instance.process_received_tc(N,TC)) -> (exists R:round_t. exists TC:tc_t. qonv_implies_parent_gl.global_lock(B) & tc_t.round(TC,R) & block_t.round(B,R) & global_view_instance.process_received_tc(N,TC))
    }

    invariant ~ (exists TC:tc_t. qonv_implies_parent_gl.global_lock(B) & tc_t_conv.tc_pred_pred(TC,R) & block_t_conv.block_pred_pred(B,R) & global_view_instance.process_received_tc(N,TC))

    # invariant global_view_instance.process_in_round(N) = R & 0 < R & ~ round_t.succ(0,R) & qonv_implies_parent_gl.global_lock(B) & block_t_conv.block_pred_pred(B,R) -> (exists B:block_t. global_view_instance.process_received_qc(N,B) & block_t_conv.block_pred_pred(B,R))

    attribute macro_finder=false
} with global_view_instance, block_t, round_t, proposal_n_t, prepare_t, genesis_member, qc_t, timeout_t,proposal_f_t, block_t_conv, tc_t_conv, round_t_conv, round_predecessor, gv_to_has_qc_gte_gl_m2, gv_tc_implies_no_gl_p1, gv_basic_validities.gv_inv_received_tc_valid, gv_gloabal_lock_cstd#, gv_action_requires

isolate gv_to_has_qc_gte_gl_m4 = {

    private {
        invariant global_view_instance.process_in_round(N) = R & 0 < R & ~ round_t.succ(0,R) & qonv_implies_parent_gl.global_lock(B) & block_t_conv.block_pred_pred(B,R) -> (exists B:block_t. global_view_instance.process_received_qc(N,B) & block_t_conv.block_pred_pred(B,R)) | (exists TC:tc_t. qonv_implies_parent_gl.global_lock(B) & tc_t_conv.tc_pred_pred(TC,R) & block_t_conv.block_pred_pred(B,R) & global_view_instance.process_received_tc(N,TC))

        invariant global_view_instance.process_in_round(N) = R & 0 < R & ~ round_t.succ(0,R) & qonv_implies_parent_gl.global_lock(B) & block_t_conv.block_pred_pred(B,R) -> (exists Br:block_t. global_view_instance.process_received_qc(N,Br) & block_t_conv.block_pred_pred(Br,R))
    }

    invariant R = global_view_instance.process_in_round(N) & 0 < R & ~ round_t.succ(0,R) & qonv_implies_parent_gl.global_lock(B) & block_t_conv.block_pred_pred(B,R) -> (exists Br:block_t. global_view_instance.process_received_qc(N,Br) & block_t_conv.block_pred_pred(Br,R))

    attribute macro_finder=false
} with global_view_instance, block_t, round_t, proposal_n_t, prepare_t, genesis_member, qc_t, timeout_t,proposal_f_t, block_t_conv, tc_t_conv, round_t_conv, round_predecessor, gv_to_has_qc_gte_gl_m2, gv_tc_implies_no_gl_p1, gv_to_has_qc_gte_gl_m3#, gv_action_requires

isolate lv_before_to_qc_ge_gl = {
    before global_view_instance.timeout(n:process_index_t, r:round_t, maxCommitQC:qc_t, tc_fp1:tc_fplusone_t, tc:tc_t) {
        require exists B:block_t. block_t_conv.block_pred(B,r) | (exists N1:process_index_t. exists QC:qc_t. global_view_instance.process_sent_timeout(N1,r,QC) & (forall B:block_t. qc_t.block(QC,B) -> global_view_instance.process_received_qc(n,B)))
    }
} with global_view_instance, block_t, round_t, proposal_n_t, prepare_t, genesis_member, qc_t, timeout_t,proposal_f_t, block_t_conv

isolate gv_to_has_qc_gte_gl = {
    invariant is_good(N) & global_view_instance.process_sent_timeout(N,R,QC) & qonv_implies_parent_gl.global_lock(Bg) & block_t_conv.block_lt_round(Bg,R) -> qc_t_conv.qc_gte_block(QC,Bg)
} with global_view_instance, lv_before_to_qc_ge_gl, gv_to_has_qc_gte_gl_m4,block_t, round_t, proposal_n_t, prepare_t, genesis_member, qc_t, timeout_t,proposal_f_t, qonv_implies_parent_gl, block_t_conv, qc_t_conv