#lang ivy1.8

include domain_model
include network_model
include algorithm
include global_view

# ivy_check trace=true isolate=gv classic_safety.ivy

# ivy_check trace=true isolate=gdc_properties classic_safety.ivy

# ivy_check trace=true isolate=gdc_properties classic_safety.ivy

# ivy_check trace=true isolate=basic_safety.processor classic_safety.ivy

# ivy_check trace=true isolate=basic_safety.continuity classic_safety.ivy

# ivy_check trace=true isolate=basic_safety.ldc_properties classic_safety.ivy

# ivy_check trace=true isolate=basic_safety.global_properties classic_safety.ivy

isolate gv = {

	axiom forall R:round_t. R = R

	instantiate global_view

	invariant forall N:node_t. forall B:block_t. forall R:round_t. forall Bl:block_t. (node_has_voted_detail(N,B,R,Bl) & is_good(N)) -> (round_t.succ(B.round,R) & B.parent = block_t.hash(Bl) & node_has_voted(N,B))

	invariant forall N:node_t. forall B:block_t. (is_good(N) & node_has_locked(N,B)) -> exists Q:quorum_t. forall N1:node_t. (quorum_t.member(N1,Q) -> node_has_voted(N1,B))

	invariant forall B1:block_t. forall B2:block_t. forall N:node_t. (is_good(N) & node_has_voted(N,B1) & node_has_voted(N,B2) & B1.round = B2.round) -> B1 = B2

	invariant forall N1:node_t. forall N2:node_t. forall B1:block_t. forall B2:block_t. (is_good(N1) & is_good(N2) & node_has_locked(N1, B1) & node_has_locked(N2, B2) & B1.round = B2.round) -> B1 = B2

	invariant forall N:node_t. forall Qc:cert_t. (is_good(N) & node_has_processed_qc(N,Qc)) -> exists Q:quorum_t. forall N1:node_t. (quorum_t.member(N1,Q) -> node_has_voted(N1,Qc.block))

	invariant forall N1:node_t. forall N2:node_t. forall Q1:cert_t. forall Q2:cert_t. (is_good(N1) & is_good(N2) & node_has_processed_qc(N1, Q1) & node_has_processed_qc(N2, Q2) & Q1.block.round = Q2.block.round) -> Q1.block = Q2.block

	############# starting experimentation from here

} with quorum_t, round_t, block_t

isolate gdc_properties = {

	relation gdc(B:block_t)

	definition gdc(B:block_t) = exists Q:quorum_t. exists R:round_t. (round_t.succ(B.round,R) & (forall N:node_t. (quorum_t.member(N,Q) & is_good(N)) -> gv.node_has_locked_detail(N,B,R)))

	invariant forall Bc:block_t. forall Bp:block_t. Bc.parent = block_t.hash(Bp) -> Bp.round < Bc.round

	invariant forall N:node_t. forall B:block_t. forall R:round_t. forall Bl:block_t. (gv.node_has_voted_detail(N,B,R,Bl) & is_good(N)) -> (round_t.succ(B.round,R) & B.parent = block_t.hash(Bl) & gv.node_has_voted(N,B) & (Bl = block_t.nil | gv.node_has_locked_recently(N,Bl,R)))

	invariant forall N:node_t. forall B:block_t. forall R:round_t. (is_good(N) & gv.node_has_locked_detail(N,B,R)) -> B.round < R

	private {
		invariant forall N:node_t. forall B:block_t. (is_good(N) & gv.node_has_voted(N,B)) -> exists R:round_t. exists Bp:block_t. (gv.node_has_voted_detail(N,B,R,Bp) & round_t.succ(B.round,R) & B.parent = block_t.hash(Bp))
	}

	invariant forall Bc:block_t. forall Bp:block_t. gv.quorum_of_votes(Bc,Bp) <-> exists Q:quorum_t. exists R:round_t. round_t.succ(Bc.round,R) &  Bc.parent=block_t.hash(Bp) & forall N1:node_t. ((quorum_t.member(N1,Q) & is_good(N1)) -> (gv.node_has_voted_detail(N1,Bc,R,Bp) & is_good(N1)))

	invariant forall Bc:block_t. forall Bp:block_t. forall N:node_t. (is_good(N) & gv.node_has_locked(N,Bc) & Bc.parent=block_t.hash(Bp) & Bp ~= block_t.nil) -> gv.quorum_of_votes(Bc,Bp)

	invariant forall Bp:block_t. forall R:round_t. (gv.quorum_of_recent_locks(Bp,R) <-> exists Q:quorum_t. forall N:node_t. (quorum_t.member(N,Q) & is_good(N) & Bp~= block_t.nil) -> gv.node_has_locked_recently(N,Bp,R))

	############# starting experimentation from here
} with gv, quorum_t, round_t, block_t

isolate gdc_properties2 = {

	private {
		invariant forall N:node_t. forall B:block_t. forall R:round_t. forall Bl:block_t. (gv.node_has_voted_detail(N,B,R,Bl) & is_good(N)) -> (round_t.succ(B.round,R) & B.parent = block_t.hash(Bl) & gv.node_has_voted(N,B) & (Bl = block_t.nil | gv.node_has_locked_recently(N,Bl,R)))

		invariant forall N:node_t. forall B:block_t. forall R:round_t. forall Bl:block_t. (gv.node_has_voted_detail(N,B,R,Bl) & is_good(N) & Bl ~= block_t.nil) -> (round_t.succ(B.round,R) & B.parent = block_t.hash(Bl) & gv.node_has_voted(N,B) & gv.node_has_locked_recently(N,Bl,R))
	}

	invariant forall Bc:block_t. forall Bp:block_t. forall R:round_t. (gv.quorum_of_votes(Bc,Bp) & round_t.succ(Bc.round,R) & Bp ~= block_t.nil) -> gv.quorum_of_recent_locks(Bp,R)

	invariant forall N:node_t. forall B:block_t. forall R:round_t. (is_good(N) & gv.node_has_locked_detail(N,B,R)) -> B.round < R

	invariant forall B:block_t. forall Bp:block_t. (exists N:node_t. (is_good(N) & gv.node_has_locked(N,B)) & B.parent=block_t.hash(Bp) & round_t.succ(Bp.round,B.round) & Bp ~= block_t.nil) -> gdc_properties.gdc(Bp)
} with gv, quorum_t, round_t, gdc_properties

isolate gdc_properties3 = {

	############################ start experimentation from here
	invariant forall R1,R2,R3:round_t. (round_t.succ(R1,R2) & round_t.succ(R1,R3)) -> R2 = R3
	
	private {
		invariant forall N:node_t. forall B:block_t. forall R:round_t. forall Bp:block_t. (is_good(N) & gv.node_has_voted(N,B) & round_t.succ(B.round,R) & B.parent = block_t.hash(Bp)) -> gv.node_has_voted_detail(N,B,R,Bp)
	}

	invariant forall N:node_t. forall Bc:block_t. forall R:round_t. forall Bp:block_t. forall Qc:cert_t. (is_good(N) & gv.node_has_processed_qc(N,Qc) & Qc.block = Bc & Bc.parent=block_t.hash(Bp) & Bp ~= block_t.nil & round_t.succ(Bc.round,R)) -> forall N1:node_t. (is_good(N1) & quorum_t.member(N1,Qc.cert)) -> (is_good(N1) & gv.node_has_voted(N1,Bc) & round_t.succ(Bc.round,R) & Bc.parent=block_t.hash(Bp))

	invariant forall N:node_t. forall Bc:block_t. forall R:round_t. forall Bp:block_t. forall Qc:cert_t. (is_good(N) & gv.node_has_processed_qc(N,Qc) & Qc.block = Bc & Bc.parent=block_t.hash(Bp) & Bp ~= block_t.nil & round_t.succ(Bc.round,R)) -> forall N1:node_t. (is_good(N1) & quorum_t.member(N1,Qc.cert)) -> (is_good(N1) & gv.node_has_voted_detail(N1,Bc,R,Bp))

	invariant forall N:node_t. forall B:block_t. forall R:round_t. forall Bl:block_t. (gv.node_has_voted_detail(N,B,R,Bl) & is_good(N)) -> (round_t.succ(B.round,R) & B.parent = block_t.hash(Bl) & gv.node_has_voted(N,B) & (Bl = block_t.nil | gv.node_has_locked_recently(N,Bl,R)))

	invariant forall N:node_t. forall Bc:block_t. forall R:round_t. forall Bp:block_t. forall Qc:cert_t. (is_good(N) & gv.node_has_processed_qc(N,Qc) & Qc.block = Bc & Bc.parent=block_t.hash(Bp) & Bp ~= block_t.nil & round_t.succ(Bc.round,R)) -> forall N1:node_t. (is_good(N1) & quorum_t.member(N1,Qc.cert)) -> (is_good(N1) & (Bp ~= block_t.nil | gv.node_has_locked_recently(N1,Bp,R)))
} with gv, quorum_t, round_t, gdc_properties, gdc_properties2, block_t

isolate gdc_properties4 = {
	invariant forall Bgdc:block_t. forall Rgdc:round_t. (gdc_properties.gdc(Bgdc) & round_t.succ(Bgdc.round,Rgdc)) -> exists Q:quorum_t. (forall N:node_t. (quorum_t.member(N,Q) & is_good(N)) -> gv.node_has_locked_detail(N,Bgdc,Rgdc))

} with gv, quorum_t, round_t, block_t, gdc_properties

isolate gdc_properties5 = { #gets stuck trying to prove
	relation quorum_of_locks(B:block_t, R:round_t)

	definition quorum_of_locks(B:block_t, R:round_t) = exists Q:quorum_t. forall N:node_t. (is_good(N) & quorum_t.member(N,Q)) -> gv.node_has_locked_detail(N,B,R)

	invariant forall Bp:block_t. forall R:round_t. (gv.quorum_of_recent_locks(Bp,R) -> exists Q:quorum_t. forall N:node_t. (quorum_t.member(N,Q) & is_good(N) & Bp~= block_t.nil) -> gv.node_has_locked_recently(N,Bp,R))

	invariant forall B:block_t. forall R:round_t. quorum_of_locks(B, R) -> exists Q:quorum_t. forall N:node_t. (is_good(N) & quorum_t.member(N,Q)) -> gv.node_has_locked_detail(N,B,R)

	#invariant exists Qgdc:quorum_t. exists Bgdc:block_t. exists Rgdc:round_t. ((forall N:node_t. (quorum_t.member(N,Q) & is_good(N)) -> gv.node_has_locked_detail(N,Bgdc,Rgdc)) -> (exists Qlr:quorum_t. exists Bplr:block_t. exists Rlr:round_t. ((forall N1:node_t. (is_good(N1) & quorum_t.member(N1,Qlr)) -> (is_good(N1) & (Bplr ~= block_t.nil | gv.node_has_locked_recently(N1,Bplr,Rlr)))) -> exists N2:node_t. (is_good(N2) & gv.node_has_locked_detail(N,Bgdc,Rgdc) & (Bplr ~= block_t.nil | gv.node_has_locked_recently(N1,Bplr,Rlr))))))

	invariant forall Bgdc:block_t. forall Rgdc:round_t. forall Blr:block_t. forall Rlr:round_t. (quorum_of_locks(Bgdc,Rgdc) & gv.quorum_of_recent_locks(Blr,Rlr)) -> exists N:node_t. (is_good(N) & gv.node_has_locked_detail(N,Bgdc,Rgdc) & (Bp~= block_t.nil | gv.node_has_locked_recently(N,Blr,Rlr)))
} with gv,quorum_t, gdc_properties

isolate gdc_properties6 = {
	relation no_lock(N:node_t,Rl:round_t,Ru:round_t,Bs:block_t)

	definition no_lock(N,Rl,Ru,Bs:block_t) = forall R:round_t. forall B:block_t. (((Rl < R & R < Ru) -> ~gv.node_has_locked_detail(N,B,R)) & ((gv.node_has_locked_detail(N,B,Rl) & B ~= Bs) -> B.round < Bs.round))

	private {
		invariant forall N:node_t. forall Bs:block_t. forall Rs:round_t. gv.node_has_locked_recently(N,Bs,Rs) -> exists Rl:round_t. (Rl < Rs & gv.node_has_locked_detail(N,Bs,Rl) & no_lock(N,Rl,Rs,Bs))
	}
	
	invariant forall N:node_t. forall Bs:block_t. forall Rs:round_t. forall Bgdc:block_t. forall Rgdc:round_t. (gv.node_has_locked_recently(N,Bs,Rs) & gv.node_has_locked_detail(N,Bgdc,Rgdc) & Rgdc < Rs) -> (forall Rl:round_t. Rl < Rgdc -> ~no_lock(N,Rl,Rs,Bs))


	invariant  forall Bgdc:block_t. forall N:node_t. forall Bs:block_t. exists Rgdc:round_t. exists Rs:round_t. (gv.node_has_locked_detail(N,Bgdc,Rgdc) & gv.node_has_locked_recently(N,Bs,Rs) & round_t.succ(Bgdc.round,Rgdc) & Rgdc < Rs) -> exists Rl:round_t. (Rgdc <= Rl & Rl < Rs & gv.node_has_locked_detail(N,Bs,Rl) & no_lock(N,Rl,Rs,Bs))


	invariant  exists Bgdc:block_t. exists Rgdc:round_t. exists N:node_t. exists Bs:block_t. exists Rs:round_t. ((gv.node_has_locked_detail(N,Bgdc,Rgdc) & gv.node_has_locked_recently(N,Bs,Rs) & Rgdc < Rs) -> exists Rl:round_t. (Rgdc <= Rl & Rl < Rs & gv.node_has_locked_detail(N,Bs,Rl) & no_lock(N,Rl,Rs,Bs)))
} with gv, quorum_t, round_t, block_t

isolate gdc_properties7 = {
	invariant forall Bc:block_t. forall Bp:block_t. forall N:node_t. (is_good(N) & gv.node_has_locked(N,Bc) & Bc.parent=block_t.hash(Bp) & Bp ~= block_t.nil) -> exists Rcp1:round_t. round_t.succ(Bc.round,Rcp1) & gv.quorum_of_recent_locks(Bp,Rcp1)
} with gv,round_t,gdc_properties5,gdc_properties6,gdc_properties

isolate gdc_properties8 = { #gets stuck trying to prove
	invariant forall Bgdc:block_t. gdc_properties.gdc(Bgdc) -> exists Rgdc:round_t. round_t.succ(Bgdc.round,Rgdc) & gdc_properties5.quorum_of_locks(Bgdc,Rgdc)
} with gv,round_t,gdc_properties5,gdc_properties6,gdc_properties

isolate gdc_properties9 = {
	invariant forall Bc:block_t. forall Bp:block_t. forall N:node_t. forall Bgdc:block_t. (is_good(N) & gv.node_has_locked(N,Bc) & Bc.parent=block_t.hash(Bp) & Bp ~= block_t.nil & gdc_properties.gdc(Bgdc) & Bgdc.round < Bc.round) -> exists Rcp1:round_t. round_t.succ(Bc.round,Rcp1) & gv.quorum_of_recent_locks(Bp,Rcp1) & exists Rgdc:round_t. round_t.succ(Bgdc.round,Rgdc) & gdc_properties5.quorum_of_locks(Bgdc,Rgdc) & Rgdc < Rcp1

} with gv, round_t,gdc_properties,gdc_properties7,gdc_properties8,gdc_properties5

isolate gdc_properties10 = { #gets stuck trying to prove
	invariant forall Bc:block_t. forall Bp:block_t. forall N:node_t. forall Bgdc:block_t. (is_good(N) & gv.node_has_locked(N,Bc) & Bc.parent=block_t.hash(Bp) & Bp ~= block_t.nil & gdc_properties.gdc(Bgdc) & Bgdc.round < Bc.round) -> exists N:node_t. exists Rcp1:round_t. exists Rgdc:round_t. (round_t.succ(Bc.round,Rcp1) & round_t.succ(Bgdc.round,Rgdc) & gv.node_has_locked_detail(N,Bgdc,Rgdc) & gv.node_has_locked_recently(N,Bp,Rcp1) & Rgdc < Rcp1)
} with gv, round_t,gdc_properties,gdc_properties7,gdc_properties8,gdc_properties5,gdc_properties9

isolate gdc_properties11 = { # out of FAU fragment
	invariant forall Bc:block_t. forall Bp:block_t. forall N:node_t. forall Bgdc:block_t. (is_good(N) & gv.node_has_locked(N,Bc) & Bc.parent=block_t.hash(Bp) & Bp ~= block_t.nil & gdc_properties.gdc(Bgdc) & Bgdc.round < Bc.round) -> exists Rcp1:round_t. exists Rgdc:round_t. exists Rl:round_t. (round_t.succ(Bc.round,Rcp1) & round_t.succ(Bgdc.round,Rgdc) & Rgdc <= Rl & Rl < Rcp1 & gv.node_has_locked_detail(N,Bp,Rl) & gdc_properties6.no_lock(N,Rl,Rcp1,Bp))
} with gv, round_t,gdc_properties,gdc_properties10,gdc_properties6



	# This is what we would like to prove: if Bgdc is GDC and a block Bc with Bc.round > Bgdc.round gets a quorum, then Bc's parent Bp satisfies Bgdc.round <= Bp.round. Out of FAU fragment
isolate gdc_properties12 = {
	invariant forall Q:cert_t. (gdc_properties.gdc(Q.block) & Q.block ~= block_t.nil) -> exists N:node_t. (is_good(N) & Q.block = B & gv.node_has_processed_qc(N,Q))


	invariant forall Qc:cert_t. forall Bc:block_t. forall Bp:block_t. forall N:node_t. forall Bgdc:block_t. (is_good(N) & gv.node_has_processed_qc(N,Qc) & Qc.block = Bc & Bc.parent=block_t.hash(Bp) & Bp ~= block_t.nil & gdc_properties.gdc(Bgdc) & Bgdc.round < Bc.round & Bgdc.round = Bp.round) -> Bgdc = Bp

	invariant forall Qc:cert_t. forall Bc:block_t. forall Bp:block_t. forall N:node_t. forall Bgdc:block_t. (is_good(N) & gv.node_has_processed_qc(N,Qc) & Qc.block = Bc & Bc.parent=block_t.hash(Bp) & Bp ~= block_t.nil & gdc_properties.gdc(Bgdc) & Bgdc.round < Bc.round) -> Bgdc.round <= Bp.round
} with gv, round_t, gdc_properties, quorum_t

isolate basic_safety = {

	isolate processor = {
		instantiate supraBFT(gv)

		invariant forall Bc:block_t. forall Bp:block_t. Bc.parent = block_t.hash(Bp) -> Bp.round < Bc.round

		invariant forall M:msg. forall D:node_t. (shim.sent(M,D) & M.kind = msg_kind.prepare) -> gv.node_has_voted(M.src,M.prep)

		invariant forall M:msg. forall D:node_t. (shim.sent(M,D) & M.kind=msg_kind.timeout) -> gv.node_sent_timeout(M.src,M.t)

		invariant forall N:node_t. forall H:height_t. (is_good(N) & validator(N).blockchain(H) ~= block_t.nil) -> exists Q:cert_t. (Q.block = validator(N).blockchain(H) & validator(N).qc_processed(Q))

		invariant forall N:node_t. forall B:block_t. forall R:round_t. (is_good(N) & gv.node_has_locked_detail(N,B,R)) -> (B.round < validator(N).locked.block.round | B = validator(N).locked.block)

		invariant forall N:node_t. forall B:block_t. forall Rl:round_t. forall Rs:round_t. (is_good(N) & gv.node_has_locked_detail(N,validator(N).locked.block,Rl) & Rl < Rs) -> ~gv.node_has_locked_detail(N,B,Rs)

		invariant forall N:node_t. forall B:block_t. forall R:round_t. forall Bl:block_t. (is_good(N) & gv.node_has_voted_detail(N,B,R,Bl)) -> R <= validator(N).r_c

		invariant forall N:node_t. forall B:block_t. forall R:round_t. (is_good(N) & gv.node_has_locked_detail(N,B,R)) -> R <= validator(N).r_c	

		invariant forall N:node_t. forall Q:cert_t. (is_good(N) & validator(N).qc_processed(Q)) -> gv.node_has_processed_qc(N,Q)

		########### starting experimentation from here
	} with gv, round_t, height_t, block_t, voted_t, cert_t, timeout_t, timeout_cert_t, proposal_t, shim, net.spec

	isolate continuity = {
    	invariant forall N:node_t. forall Qd:cert_t. forall Hd,Ha,Hi:height_t. (is_good(N) & processor.validator(N).forest_heights(Qd,Hd,Ha) & Ha <= Hi & Hi <= Hd) -> processor.validator(N).forest_heights(Qd,Hd,Hi)

    	invariant forall Hd,Hi,Ha:height_t. (Hd = Ha & Ha <= Hi & Hi <= Hd) -> Hi = Hd
	} with gv,processor, round_t, height_t

	isolate ldc_properties = {
		relation ldc(N:node_t, Bp:block_t, Bc:block_t)

		definition ldc(N:node_t, Bp:block_t, Bc:block_t) = Bc.parent = block_t.hash(Bp) & round_t.succ(Bp.round,Bc.round) & gv.node_has_locked(N,Bc)

		invariant forall N:node_t. forall B:block_t. forall R:round_t. gv.node_has_locked_detail(N,B,R) -> R <= processor.validator(N).r_c

		private {
			invariant forall N:node_t. forall B:block_t. forall R:round_t. (is_good(N) & gv.node_has_locked_detail(N,B,R)) -> exists Q:cert_t. (processor.validator(N).qc_processed(Q) & Q.block = B)
		}

		invariant forall N:node_t. forall B1:block_t. forall B2:block_t. forall R1:round_t. forall R2:round_t. (is_good(N) & gv.node_has_locked_detail(N,B1,R1) & gv.node_has_locked_detail(N,B2,R2) & R1 < R2) -> B1.round < B2.round

		invariant forall B:block_t. forall Bp:block_t. (exists N:node_t. (is_good(N) & gv.node_has_locked(N,B)) & B.parent=block_t.hash(Bp) & round_t.succ(Bp.round,B.round) & Bp ~= block_t.nil) -> gdc_properties.gdc(Bp)

		invariant forall B:block_t. forall Bp:block_t. (exists N:node_t. (is_good(N) & ldc(N,Bp,B) & Bp ~= block_t.nil)) -> gdc_properties.gdc(Bp)

		invariant forall N:node_t. forall H:height_t. (is_good(N) & height_t.succ(H,processor.validator(N).chain_size)) -> (gv.node_has_locked(N,processor.validator(N).tip_of_chain_qc.block) & round_t.succ(processor.validator(N).tip_of_chain_qc.block.round, processor.validator(N).dc_basis_block.round) & processor.validator(N).dc_basis_block.parent = block_t.hash(processor.validator(N).tip_of_chain_qc.block))

		invariant forall N:node_t. (is_good(N) & processor.validator(N).locked ~= cert_t.nil) -> processor.validator(N).forest_leaf(processor.validator(N).locked, processor.validator(N).locked_height)

		invariant forall N:node_t. (is_good(N) & processor.validator(N).dc_basis_qc ~= cert_t.nil) -> gv.node_has_locked(N,processor.validator(N).dc_basis_block)

		relation ldc_x(N:node_t, Bp:block_t, Bc:block_t)

		definition ldc_x(N,Bp:block_t,Bc:block_t) = Bc.parent = block_t.hash(Bp) & gv.node_has_locked(N,Bc) & Bp.round < Bc.round & forall Rp:round_t. (Bp.round < Rp -> Bc.round <= Rp)

		invariant forall N:node_t. forall Bp:block_t. forall Bc:block_t. ldc(N,Bp,Bc) <-> ldc_x(N,Bp,Bc)
		
		invariant forall N:node_t. (is_good(N)) -> processor.validator(N).qp_when_adding_qc = processor.validator(N).tip_of_chain_qc

		invariant forall N:node_t. (is_good(N) & processor.validator(N).tip_of_chain_qc ~= cert_t.nil) -> processor.validator(N).commit_candidates(processor.validator(N).tip_of_chain_qc,processor.validator(N).tip_of_chain_height)

		invariant forall N:node_t. (is_good(N) & processor.validator(N).tip_of_chain_qc ~= cert_t.nil) -> (processor.validator(N).blockchain(processor.validator(N).tip_of_chain_height) = processor.validator(N).tip_of_chain_qc.block & processor.validator(N).dc_basis_block.parent = block_t.hash(processor.validator(N).tip_of_chain_qc.block) & round_t.succ(processor.validator(N).tip_of_chain_qc.block.round, processor.validator(N).dc_basis_block.round))

		invariant forall N:node_t. forall H:height_t. (is_good(N) & height_t.succ(H, processor.validator(N).chain_size)) -> ldc_x(N,processor.validator(N).blockchain(H),processor.validator(N).dc_basis_block)

		invariant forall N:node_t. forall H:height_t. (is_good(N) & height_t.succ(H, processor.validator(N).chain_size)) -> gdc_properties.gdc(processor.validator(N).blockchain(H))

		########### starting experimentation from here

		invariant forall Qc:cert_t. forall Bc:block_t. forall Bp:block_t. forall N:node_t. forall Bgdc:block_t. (is_good(N) & gv.node_has_processed_qc(N,Qc) & Qc.block = Bc & Bc.parent=block_t.hash(Bp) & Bp ~= block_t.nil & gdc_properties.gdc(Bgdc) & Bgdc.round < Bc.round) -> Bgdc.round <= Bp.round

	} with processor, round_t, gv, cert_t, gdc_properties2, height_t, block_t,gdc_properties12

	isolate global_properties = {
		invariant forall N:node_t. forall H:height_t. (is_good(N) & processor.validator(N).blockchain(H) ~= block_t.nil) -> exists Q:cert_t. (processor.validator(N).qc_processed(Q) & Q.block = processor.validator(N).blockchain(H))

		invariant [round_safety_statement] forall N1:node_t. forall N2:node_t. forall H1:height_t. forall H2:height_t. (is_good(N1)  & is_good(N2) & processor.validator(N1).blockchain(H1) ~= block_t.nil & processor.validator(N2).blockchain(H2) ~= block_t.nil & processor.validator(N1).blockchain(H1).round = processor.validator(N2).blockchain(H2).round ) -> processor.validator(N1).blockchain(H1) = processor.validator(N2).blockchain(H2)

		invariant forall N:node_t. forall B:block_t. (is_good(N) & gv.node_has_voted(N,B)) -> B.parent = block_t.hash(block_t.nil) | exists Bp:block_t. (B.parent = block_t.hash(Bp) & gv.node_has_locked(N,Bp))

		########### starting experimentation from here
		#invariant forall N1:node_t. forall N2:node_t. (is_good(N1) & is_good(N2) & processor.validator(N1).blockchain(0) ~= block_t.nil & processor.validator(N2).blockchain(0) ~= block_t.nil) -> processor.validator(N1).blockchain(0) = processor.validator(N2).blockchain(0)

		#invariant forall N1:node_t. forall N2:node_t. forall H:height_t. (is_good(N1) & is_good(N2) & processor.validator(N1).blockchain(H) ~= block_t.nil & processor.validator(N2).blockchain(H) ~= block_t.nil) -> processor.validator(N1).blockchain(H) = processor.validator(N2).blockchain(H)
	} with gv, height_t, processor, ldc_properties, round_t, block_t
} with gv, round_t, height_t, block_t, cert_t, shim, net.spec, processor, gdc_properties, gdc_properties2
