#lang ivy1.8

include types
include network

module global_view = {
    #process N is currently in round R
    function process_in_round(N:process_index_t) : round_t

    #process N received the normal proposal P
    relation process_received_normal_proposal(N:process_index_t, P:proposal_n_t)

    #process N received the fallback proposal P
    relation process_received_fallback_proposal(N:process_index_t, P:proposal_f_t)

    #process N has sent a prepare message for block B received via a normal proposal
    relation process_voted_normal(N:process_index_t, B:block_t)

    #process N has sent a prepare message for block B received via a fallback proposal with a TC based on the quorum Q of timeout messages
    relation process_voted_fallback(N:process_index_t, B:block_t, Q:quorum_t)

    #process N has sent a prepare message for block B either via normal or fallback voting
    relation process_voted(N:process_index_t, B:block_t)

    #process N has currently locked QC for this block
    function process_locked(N:process_index_t) : block_t

    #process N has processed a QC for block B, should advance to R=B.r+2
    relation process_processed_qc(N:process_index_t, B:block_t)

    #process N has committed block B to its blockchain
    relation process_committed(N:process_index_t, B:block_t)

    #the block last committed by process N
    function process_last_committed(N:process_index_t) : block_t

    #process N has sent a timetout message for round R with QC qc
    relation process_sent_timeout(N:process_index_t, R:round_t, QC:qc_t)

    #process N has processed TC
    relation process_processed_tc(N:process_index_t, TC:tc_t)

    definition process_voted(N,B) = process_voted_normal(N,B) | exists Q:quorum_t. process_voted_fallback(N,B,Q)

    # In the real world, we would assess the validity of certificates using signatures. For the IVy model,
    # we use the fact that the global view has access to this information and can tell us whether the QC is
    # actually constructible from the information currently floating around in the network
    relation qc_valid(QC:qc_t)
    definition qc_valid(QC) =
                (exists B:block_t. qc_t.block(QC, B) & block_t.cstd(B)) &
                (exists Q:quorum_t. qc_t.quorum(QC, Q)) &
                (forall B1,B2:block_t. qc_t.block(QC, B1) & qc_t.block(QC, B2) -> B1 = B2) &
                (forall Q1,Q2:quorum_t. qc_t.quorum(QC, Q1) & qc_t.quorum(QC, Q2) -> Q1 = Q2) &
                (forall Q:quorum_t,N:process_index_t,B:block_t. qc_t.quorum(QC, Q) & quorum_t.member(Q, N) & qc_t.block(QC, B) -> process_voted(N, B))

    relation timeout_round_exists(T:timeout_t)
    definition timeout_round_exists(T) = exists R:round_t. timeout_t.round(T,R)
    relation timeout_qc_exists(T:timeout_t)
    definition timeout_qc_exists(T) = exists QC:qc_t. timeout_t.qc(T,QC) & qc_valid(QC)
    relation timeout_valid(T:timeout_t)
    definition timeout_valid(T) = timeout_t.was_constructed(T) & timeout_round_exists(T) & timeout_qc_exists(T) &
                (forall QC:qc_t. timeout_t.qc(T, QC) -> qc_valid(QC))
                & (forall Rt,Rq:round_t. forall QC:qc_t. forall B:block_t. timeout_t.qc(T,QC) & qc_t.block(QC,B) & block_t.round(B,Rq) & timeout_t.round(T,Rt) -> Rq < Rt)

    relation qc_round_in_tc_fplusone(QC:qc_t, R:round_t, TC:tc_fplusone_t)
    definition qc_round_in_tc_fplusone(QC,R,TC) = exists T:timeout_t. tc_fplusone_t.timeout(TC,T) & timeout_t.round(T,R) & timeout_t.qc(T,QC)

    relation tc_fplusone_valid(TC:tc_fplusone_t)
    definition tc_fplusone_valid(TC) =
                (exists R:round_t. tc_fplusone_t.round(TC, R)) &
                (exists Q:quorum_fplusone_t. tc_fplusone_t.quorum(TC, Q)) &
                (exists T:timeout_t. tc_fplusone_t.timeout(TC,T)) &
                (forall R1,R2:round_t. tc_fplusone_t.round(TC, R1) & tc_fplusone_t.round(TC, R2) -> R1 = R2) &
                (forall Q1,Q2:quorum_fplusone_t. tc_fplusone_t.quorum(TC, Q1) & tc_fplusone_t.quorum(TC, Q2) -> Q1 = Q2) &
                (forall T:timeout_t. tc_fplusone_t.timeout(TC, T) -> timeout_valid(T)) &
                (forall T:timeout_t,R:round_t. tc_fplusone_t.timeout(TC, T) & timeout_t.round(T, R) -> tc_fplusone_t.round(TC, R)) &
                (forall Q:quorum_fplusone_t,N:process_index_t,R:round_t. tc_fplusone_t.quorum(TC, Q) & tc_fplusone_t.round(TC,R) -> (quorum_fplusone_t.member(Q, N) ->
                        exists QC:qc_t. qc_round_in_tc_fplusone(QC,R,TC) & process_sent_timeout(N, R, QC)))

    relation qc_round_in_tc(QC:qc_t, R:round_t, TC:tc_t)
    definition qc_round_in_tc(QC,R,TC) = exists T:timeout_t. tc_t.timeout(TC,T) & timeout_t.round(T,R) & timeout_t.qc(T,QC)

    relation quorum_is_subset(TC:tc_t)
    definition quorum_is_subset(TC) = forall Q:quorum_t. forall N:process_index_t. forall Rt:round_t. forall QC:qc_t. tc_t.quorum(TC,Q) & quorum_t.member(Q,N) & is_good(N) & tc_t.round(TC,Rt) & process_sent_timeout(N,Rt,QC) -> qc_round_in_tc(QC,Rt,TC)

    relation tc_valid(TC:tc_t)
    definition tc_valid(TC) =
                (exists R:round_t. tc_t.round(TC, R)) &
                (exists Q:quorum_t. tc_t.quorum(TC, Q)) &
                (exists T:timeout_t. tc_t.timeout(TC,T)) &
                (forall R1,R2:round_t. tc_t.round(TC, R1) & tc_t.round(TC, R2) -> R1 = R2) &
                (forall Q1,Q2:quorum_t. tc_t.quorum(TC, Q1) & tc_t.quorum(TC, Q2) -> Q1 = Q2) &
                (forall T:timeout_t. tc_t.timeout(TC, T) -> timeout_valid(T)) &
                (forall T:timeout_t,R:round_t. tc_t.timeout(TC, T) & timeout_t.round(T, R) -> tc_t.round(TC, R)) &
                quorum_is_subset(TC) &
                forall Q:quorum_t. forall N:process_index_t. forall Rt:round_t. tc_t.quorum(TC,Q) & quorum_t.member(Q,N) & tc_t.round(TC,Rt) -> exists QC:qc_t. process_sent_timeout(N,Rt,QC) & qc_round_in_tc(QC,Rt,TC)

    relation proposal_f_valid(P:proposal_f_t)
    definition proposal_f_valid(P) = proposal_f_t.was_constructed(P) & (forall TC:tc_t. proposal_f_t.tc(P, TC) -> tc_valid(TC)) &
                (forall TC:tc_t. forall Rt,R:round_t. forall B:block_t. proposal_f_t.tc(P, TC) & proposal_f_t.block(P,B) & block_t.round(B,R) & tc_t.round(TC,Rt) -> round_t.succ(Rt,R)) &
                (forall Br,Bp:block_t, Rr,Rp,Rs:round_t. proposal_f_t.block(P,Br) & block_t.parent(Br,Bp) & block_t.round(Br,Rr) & block_t.round(Bp,Rp) & round_t.succ(Rp,Rs) -> Rs < Rr)

    relation proposal_n_valid(P:proposal_n_t)
    definition proposal_n_valid(P) = proposal_n_t.cstd(P) &
                            (forall Br,Bp:block_t. forall Rr,Rp:round_t. proposal_n_t.block(P,Br) & block_t.parent(Br,Bp) & block_t.round(Br,Rr) & block_t.round(Bp,Rp) -> (Br ~= block_t.genesis & round_t.succ(Rp,Rr) | Br = block_t.genesis & Rp = 0 & Rr = 0))

    relation quorum_of_votes(B:block_t)
    definition quorum_of_votes(B) = exists Q:quorum_t. forall N:process_index_t. quorum_t.member(Q,N) -> process_voted(N,B)

    relation no_timeout_for_block_round(N:process_index_t, B:block_t)
    definition no_timeout_for_block_round(N,B) = forall R:round_t. block_t.round(B,R) -> forall QC:qc_t. ~process_sent_timeout(N,R,QC)

    relation no_timeout_for_block_prev_round(N:process_index_t, B:block_t)
    definition no_timeout_for_block_prev_round(N,B) = forall R,Rp:round_t. block_t.round(B,R) & round_t.succ(Rp,R) -> (forall QC:qc_t. ~process_sent_timeout(N,R,QC))

    relation successive_blocks(Bp:block_t, Bc:block_t)
    definition successive_blocks(Bp,Bc) = forall Rp,Rc:round_t. block_t.round(Bp,Rp) & block_t.round(Bc,Rc) -> round_t.succ(Rp,Rc)

    relation ldc_pair(N:process_index_t, Bp:block_t, Bc:block_t)
    definition ldc_pair(N, Bp, Bc) = block_t.parent(Bc,Bp) & successive_blocks(Bp,Bc) & process_processed_qc(N,Bp) & process_processed_qc(N,Bc)

    relation ldc(N:process_index_t, B:block_t)
    definition ldc(N, B) = exists Bc:block_t. ldc_pair(N,B,Bc)

    relation eligible_to_commit(N:process_index_t, Bp:block_t)
    definition eligible_to_commit(N,Bp) = process_processed_qc(N,Bp) & ldc(N,Bp) & (forall Ba:block_t. block_t.ancestor(Bp,Ba) -> process_processed_qc(N,Ba))

    after init {
        process_in_round(N) := round_t.next(0);
        process_received_normal_proposal(N,P) := false;
        process_received_fallback_proposal(N,P) := false;
        process_voted_normal(N, B) := B = block_t.genesis;
        process_voted_fallback(N, B, Q) := false;
        process_processed_qc(N,B) := B = block_t.genesis;
        process_locked(N) :=  block_t.genesis;
        process_committed(N, B) := B = block_t.genesis;
        process_last_committed(N) := block_t.genesis;
        process_sent_timeout(N, R, QC) := false;
        process_processed_tc(N,TC) := false;
    }

    action enter_round(n:process_index_t,r:round_t,b:block_t,tc:tc_t) = {

        process_in_round(n) := r;

    }

    action receive_normal_proposal(n:process_index_t, p:proposal_n_t) = {

        process_received_normal_proposal(n,p) := true;

    }

    action receive_fallback_proposal(n:process_index_t, p:proposal_f_t) = {

        process_received_fallback_proposal(n,p) := true;

    }

    action vote_normal(n:process_index_t, p:proposal_n_t) = {

        process_voted_normal(n, B) := process_voted_normal(n, B) | proposal_n_t.block(p,B);

    }

    action vote_fallback(n:process_index_t, p:proposal_f_t, q:quorum_t) = {

        process_voted_fallback(n, B, q) := process_voted_fallback(n,B,q) | proposal_f_t.block(p,B);

    }

    action process_qc(n:process_index_t, b:block_t, qc:qc_t, rToAdvance:round_t) = {

        process_processed_qc(n,b) := true;

        if process_in_round(n) < rToAdvance {
            var tc : tc_t;
            enter_round(n,rToAdvance,b,tc);
        }
    }

    action lock(n:process_index_t, b:block_t, qc:qc_t) = {

        process_locked(n) := b;
    }

    action commit(n:process_index_t, commit_candidate:block_t, last_committed:block_t) = {

        process_committed(n, B) := process_committed(n, B) | B = commit_candidate | (block_t.ancestor(commit_candidate,B) & block_t.ancestor(B,last_committed));
        process_last_committed(n) := commit_candidate;

    }

    action timeout(n:process_index_t, r:round_t, locked:qc_t) = {
        
        process_sent_timeout(n, r, locked) := true;
        
    }

    action processed_tc(n:process_index_t, tc:tc_t, rToAdvance:round_t) = {

        process_processed_tc(n,tc) := true;

        if process_in_round(n) < rToAdvance {
            var b : block_t;
            enter_round(n,rToAdvance,b,tc);
        }
    }

}
