#lang ivy1.8

include domain_model

module global_view = {
	relation node_voted(N:process_index_t, B:block_t)
	relation node_committed(N:process_index_t, B:block_t)
	relation node_sent_timeout(N:process_index_t, T:timeout_t)

	action vote(n:process_index_t, b:block_t)
	action commit(n:process_index_t, b:block_t)
	action timeout(n:process_index_t, t:timeout_t)

	relation valid_qc(QC:qc_t)
	definition valid_qc(QC) =
				~(exists B1,B2:block_t. B1 ~= B2 & qc_t.block(QC, B1) & qc_t.block(QC, B2)) &
				~(exists P1,P2:prepare_t. P1 ~= P2  & qc_t.prepare(QC, P1) & qc_t.prepare(QC, P2)) &
				~(exists Q1,Q2:quorum_t. Q1 ~= Q2 & qc_t.quorum(QC, Q1) & qc_t.quorum(QC, Q2)) &
				(forall P:prepare_t. qc_t.prepare(QC, P) -> prepare_t.valid(P)) &
				(forall P:prepare_t,B:block_t. qc_t.prepare(QC, P) & prepare_t.block(P, B) -> qc_t.block(QC, B)) &
				(forall Q:quorum_t,N:process_index_t,B:block_t. qc_t.quorum(QC, Q) & quorum_t.member(Q, N) & qc_t.block(QC, B) -> node_voted(N, B))

	relation valid_tc(TC:tc_t)

	specification {
	}

	implementation {
		after init {
			node_voted(N, B) := B = block_t.genesis;
			node_committed(N, B) := B = block_t.genesis;
			node_sent_timeout(N, B) := false;
		}

		implement vote(n:process_index_t, b:block_t) {
			node_voted(n, b) := true;
		}

		implement commit(n:process_index_t, b:block_t) {
			node_committed(n, b) := true;
		}

		implement timeout(n:process_index_t, t:timeout_t) {
			node_sent_timeout(n, t) := true;
		}
	}
}
